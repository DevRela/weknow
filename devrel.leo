<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://leoeditor.com/leo_toc.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20120710140424.5446" a="E"><vh>4SAE</vh>
<v t="zoomq.20120710140424.5447"><vh>@nosent README.md</vh></v>
<v t="zoomq.20120710140424.5454"><vh>@nosent config.yaml</vh></v>
<v t="zoomq.20120710140424.5455"><vh>@nosent index.wsgi</vh></v>
<v t="zoomq.20131226095232.5938"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20120723102156.5544" a="E"><vh>@nosent config.py</vh>
<v t="zoomq.20131226095232.5938"></v>
<v t="zoomq.20120727213305.14750"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120710140424.5456"><vh>&lt;&lt;cfg4Borg&gt;&gt;</vh>
<v t="zoomq.20130926092950.5432"><vh>环境切换</vh></v>
<v t="zoomq.20130927104354.5456"><vh>storage</vh></v>
<v t="zoomq.20130923093950.3647"><vh>KVDB</vh>
<v t="zoomq.20131226095232.5939"><vh>&lt;&lt;FW actions&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5929"><vh>&lt;&lt;FW POOL&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5397"><vh>&lt;&lt;MEMBER&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8569"><vh>&lt;&lt;大妈们&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5395"><vh>&lt;&lt;CONTENT&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5396"><vh>&lt;&lt;HISTORIC&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130918155053.7084"><vh>4wechat</vh>
<v t="zoomq.20130923093950.8818"><vh>&lt;&lt;ALIAS&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.7285"><vh>&lt;&lt;XML模板&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6457"><vh>活动报名</vh></v>
<v t="zoomq.20130925103854.6455"><vh>帮助.系统</vh></v>
<v t="zoomq.20130925103854.6456"><vh>用户信息</vh></v>
<v t="zoomq.20130925103854.6458"><vh>文章查询</vh></v>
<v t="zoomq.20131224083725.5910"><vh>公众号</vh></v>
</v>
<v t="zoomq.20130925103854.4951"><vh>RESTful</vh>
<v t="zoomq.20131226095232.5937"><vh>&lt;&lt;CLI4wx&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5936"><vh>&lt;&lt;CLI4sys&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5935"><vh>&lt;&lt;CLI4pub&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5934"><vh>&lt;&lt;CLI4usr&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20130925103854.4957" a="E"><vh>@nosent CLI.py</vh>
<v t="zoomq.20130925103854.4958"><vh>&lt;&lt;docopt&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.4959"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.4961"><vh>smart_rest()</vh></v>
<v t="zoomq.20131223160728.4902"><vh>_https_get()</vh></v>
<v t="zoomq.20131224083725.5909"><vh>_https_post()</vh></v>
<v t="zoomq.20131224083725.5906"><vh>_wx_token_get()</vh></v>
<v t="zoomq.20130925103854.4960"><vh>_rest_main()</vh>
<v t="zoomq.20130925103854.6452"><vh>&lt;&lt;HTTPS&gt;&gt;</vh>
<v t="zoomq.20131224083725.5907"><vh>&lt;&lt;消息发送&gt;&gt;</vh></v>
<v t="zoomq.20131224083725.5904"><vh>&lt;&lt;获取指定用户信息&gt;&gt;</vh></v>
<v t="zoomq.20131224083725.5903"><vh>&lt;&lt;列表获得&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.6450"><vh>&lt;&lt;echo matters&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.4901"><vh>&lt;&lt;GET DEL&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6451"><vh>&lt;&lt;PUT&gt;&gt;</vh></v>
<v t="zoomq.20130927104354.6053"><vh>&lt;&lt;POST&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5541" a="E"><vh>module</vh>
<v t="zoomq.20130925103854.6406"><vh>@nosent __init__.py</vh></v>
<v t="zoomq.20120820121523.7422"><vh>@nosent auth.py</vh>
<v t="zoomq.20120820121523.7423"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120820121523.7426"><vh>sha256_uhex</vh></v>
<v t="zoomq.20120820121523.7424"><vh>check_login</vh></v>
<v t="zoomq.20120820121523.7425"><vh>auth_required</vh></v>
<v t="zoomq.20130925103854.6447"><vh>_genArgsStr</vh></v>
<v t="zoomq.20130925103854.6449"><vh>_genQueryArgs</vh></v>
<v t="zoomq.20130925103854.6443"><vh>_query2dict</vh></v>
<v t="zoomq.20130925103854.6445"><vh>_chkQueryArgs</vh></v>
</v>
<v t="zoomq.20120717112543.5481"><vh>@nosent utility.py</vh>
<v t="zoomq.20120727213305.14698"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130927104354.6047"><vh>PUT2SS()</vh></v>
<v t="zoomq.20120727213305.14756"><vh>INIobjSYS()</vh></v>
<v t="zoomq.20130925103854.6439"><vh>ADD4SYS()</vh></v>
<v t="zoomq.20120802192540.7100"><vh>TSTAMP()</vh></v>
<v t="zoomq.20120802192540.5468"><vh>GENID()</vh></v>
<v t="zoomq.20130925103854.6429"><vh>USRID()</vh></v>
<v t="zoomq.20130925103854.6463"><vh>DAMAID()</vh></v>
<v t="zoomq.20120727213305.14699"><vh>INCR4KV()</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5543" a="E"><vh>web</vh>
<v t="zoomq.20120723102156.5545"><vh>@nosent __init__.py</vh>
<v t="zoomq.20120723102156.5546"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120723102156.5548"><vh>/</vh></v>
<v t="zoomq.20120727213305.14707"><vh>404+各种默认处理</vh></v>
</v>
<v t="zoomq.20131225115522.4949"><vh>__choas_POST /echo</vh>
<v t="zoomq.20130923093950.8817"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8816"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8567"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8563"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8564"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8565"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8566"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
<v t="zoomq.20120723102156.5561"><vh>@nosent mana4api.py</vh>
<v t="zoomq.20120723102156.5562"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130918155053.5760"><vh>GET  /echo</vh></v>
<v t="zoomq.20130925103854.5007"><vh>CLI 远程管理&gt;&gt;&gt;</vh>
<v t="zoomq.20131223160728.4904"><vh>GET info/:UUID</vh></v>
<v t="zoomq.20130925103854.5049"><vh>GET sum/db|FW|dm|m|e|p</vh>
<v t="zoomq.20131226095232.5953"><vh>&lt;&lt;sum fw&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5931"><vh>&lt;&lt;sum db&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5933"><vh>&lt;&lt;sum bk&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5930"><vh>&lt;&lt;sum dm&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5932"><vh>&lt;&lt;sum others&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130927104354.6049"><vh>GET st/kv</vh></v>
<v t="zoomq.20131007093121.5602"><vh>数据管理</vh>
<v t="zoomq.20130927104354.6051"><vh>POST bkup/db|dm|m|e|p</vh>
<v t="zoomq.20131223160728.4905"><vh>&lt;&lt;dump 所有内容&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.4907"><vh>&lt;&lt;dump 指定内容&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130927104354.6062"><vh>PUT revert/db|dm|m|e|p</vh>
<v t="zoomq.20131223160728.4909"><vh>&lt;&lt;恢复KVDB&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.4908"><vh>&lt;&lt;恢复指定数据&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131224083725.4925"><vh>PUT resolve/his|wx</vh>
<v t="zoomq.20131224083725.4926"><vh>&lt;&lt;重并 Passpord&gt;&gt;</vh></v>
<v t="zoomq.20131224083725.4930"><vh>&lt;&lt;重并 HIS&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130927104354.6055"><vh>DELETE del/bk/:UUID</vh></v>
</v>
<v t="zoomq.20131007093121.5601"><vh>文章管理</vh>
<v t="zoomq.20131010225811.3726"><vh>GET sum/p/:TAG</vh></v>
<v t="zoomq.20131010225811.3728"><vh>DELETE del/p/:UUID</vh></v>
<v t="zoomq.20130929203117.3712" a="E"><vh>POST push/p</vh>
<v t="zoomq.20131007093121.31623"><vh>&lt;&lt;检验导入&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130926092950.5447"><vh>PUT fix/p/:tag/:UUID</vh></v>
<v t="zoomq.20130926092950.5449"><vh>__chkPAPER()</vh></v>
<v t="zoomq.20130926092950.5438"><vh>PUT fix/e/:CODE</vh></v>
</v>
<v t="zoomq.20130925103854.5041"><vh>用户管理</vh>
<v t="zoomq.20130925103854.6454"><vh>GET find/m</vh></v>
<v t="zoomq.20130928090931.3708"><vh>PUT fix/dm/:NM</vh></v>
<v t="zoomq.20130928090931.3710"><vh>PUT fix/m/:UUID</vh></v>
<v t="zoomq.20130926092950.5440"><vh>__chkDMID()</vh></v>
<v t="zoomq.20130926092950.5442"><vh>__chkDAMA()</vh></v>
</v>
<v t="zoomq.20130925103854.5033"><vh>his 事务</vh>
<v t="zoomq.20130925103854.5034"><vh>GET sum/his</vh></v>
<v t="zoomq.20130925103854.5035"><vh>GET his/last</vh></v>
</v>
<v t="zoomq.20131226095232.5946" a="E"><vh>FW 事务</vh>
<v t="zoomq.20131226095232.5939"></v>
<v t="zoomq.20131226095232.5947" a="E"><vh>GET fw/ll</vh>
<v t="zoomq.20131226095232.5956"><vh>&lt;&lt;提示组织&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131226095232.5952" a="E"><vh>PUT fw/mm/:zid</vh>
<v t="zoomq.20131228000540.4029"><vh>&lt;&lt;mv FWmsg.&gt;&gt;</vh></v>
<v t="zoomq.20131228000540.4028"><vh>&lt;&lt;mm FW&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131226095232.5950"><vh>PUT fw/aa/:zid</vh></v>
<v t="zoomq.20131226095232.5948"><vh>GET fw/dd/:uuid</vh></v>
</v>
</v>
<v t="zoomq.20130925103854.6426"><vh>__chkRegUsr()</vh>
<v t="zoomq.20131224083725.4931"><vh>&lt;&lt;chk USR2PP&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.6427"><vh>__update_usr()</vh></v>
<v t="zoomq.20130918155053.7083"><vh>POST /echo</vh></v>
<v t="zoomq.20130925103854.6430"><vh>FSM 业务逻辑核心</vh>
<v t="zoomq.20131226095232.5942" a="E"><vh>__putFW()</vh>
<v t="zoomq.20131226095232.5955"><vh>&lt;&lt;init FW msg.&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.6461" a="E"><vh>&lt;&lt;大妈联系&gt;&gt;</vh>
<v t="zoomq.20131226095232.5940"><vh>&lt;&lt;FW2DM&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5939"></v>
<v t="zoomq.20131225115522.4952"><vh>&lt;&lt;doc echo&gt;&gt;</vh></v>
<v t="zoomq.20131225115522.4951"><vh>&lt;&lt;guess DM&gt;&gt;</vh></v>
<v t="zoomq.20131225115522.4948"><vh>&lt;&lt;CC ZQ&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.6431"><vh>s 查阅文章</vh>
<v t="zoomq.20130926092950.5443"><vh>&lt;&lt;seek&gt;&gt;</vh></v>
<v t="zoomq.20130926092950.5444"><vh>&lt;&lt;tags&gt;&gt;</vh></v>
<v t="zoomq.20130926092950.5445"><vh>&lt;&lt;no_paper&gt;&gt;</vh>
<v t="zoomq.20131007093121.31624"><vh>&lt;&lt;tag paper No.&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20130925103854.6433"><vh>i 成员信息</vh>
<v t="zoomq.20130926092950.5433"><vh>&lt;&lt;info_me&gt;&gt;</vh></v>
<v t="zoomq.20130926092950.5434"><vh>&lt;&lt;edit_info&gt;&gt;</vh></v>
<v t="zoomq.20130926092950.5436"><vh>&lt;&lt;info_alias&gt;&gt;</vh></v>
<v t="zoomq.20130926092950.5435"><vh>&lt;&lt;info_mail&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131024165032.5626"><vh>nn今天</vh></v>
<v t="zoomq.20131225115522.4950"><vh>docechor</vh></v>
<v t="zoomq.20130925103854.6437"><vh>e 活动查询</vh>
<v t="zoomq.20131223160728.5957"><vh>&lt;&lt;reg_event&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.5958"><vh>&lt;&lt;reg_cancel&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.5959"><vh>&lt;&lt;reg_info&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.6441"><vh>系统信息</vh>
<v t="zoomq.20131223160728.5954"><vh>&lt;&lt;helpme&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.5955"><vh>&lt;&lt;version&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.5956"><vh>&lt;&lt;status&gt;&gt;</vh>
<v t="zoomq.20131224083725.4928"><vh>&lt;&lt;sys msg&gt;&gt;</vh></v>
<v t="zoomq.20131224083725.5911"><vh>&lt;&lt;CC ZQ&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20131224083725.5909"></v>
<v t="zoomq.20131224083725.5906"></v>
<v t="zoomq.20131223160728.4902"></v>
<v t="zoomq.20130923093950.8570"><vh>__echo_txt()</vh></v>
<v t="zoomq.20120727213305.13050"><vh>/api/sysincr</vh></v>
<v t="zoomq.20120727213305.14707"></v>
</v>
</v>
<v t="zoomq.20120727213305.14715"><vh>templates</vh>
<v t="zoomq.20120812115324.4334"><vh>&lt;&lt;sspathdefine&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14728" a="E"><vh>BASE组件</vh>
<v t="zoomq.20120710140424.5449"><vh>@nosent base.html</vh>
<v t="zoomq.20120812115324.4334"></v>
<v t="zoomq.20120710140424.5453"><vh>CSS</vh>
<v t="zoomq.20120804110957.4149"><vh>esp. 警告...</vh></v>
<v t="zoomq.20120804110957.4148"><vh>表单相关</vh></v>
<v t="zoomq.20120804110957.4147"><vh>textarea+select</vh></v>
<v t="zoomq.20120727213305.14772"><vh>button</vh></v>
<v t="zoomq.20120727213305.14773"><vh>a as button</vh></v>
<v t="zoomq.20120727213305.14781"><vh>a as btn in &lt;sub&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.14749"><vh>validatious.1.0.5.min.css</vh></v>
</v>
<v t="zoomq.20120727213305.14737"><vh>@nosent manav.html</vh></v>
<v t="zoomq.20120727213305.14705"><vh>@nosent 404.html</vh></v>
</v>
<v t="zoomq.20120727213305.14717"><vh>@nosent index.html</vh></v>
</v>
<v t="zoomq.20120723102156.5539"><vh>3party</vh>
<v t="zoomq.20130918155053.8973"><vh>@nosent __init__.py</vh></v>
</v>
<v t="zoomq.20120717112543.5493"><vh>__chaos</vh>
<v t="zoomq.20131007093121.5614"><vh>用户管理</vh>
<v t="zoomq.20131007093121.5615"><vh>GET cli/sum/usr</vh></v>
<v t="zoomq.20131007093121.5616"><vh>PUT cli/acl/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20131007093121.5617"><vh>&lt;&lt;acl bind&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131007093121.5618"><vh>PUT cli/reliv/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20131007093121.5619"><vh>&lt;&lt;reliv del&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131007093121.5620"><vh>DEL cli/del/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20131007093121.5621"><vh>&lt;&lt;usr del&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131007093121.5622"><vh>GET cli/info/usr/&lt;uuid&gt;</vh></v>
<v t="zoomq.20131007093121.5623"><vh>GET cli/list/usr/级别</vh></v>
<v t="zoomq.20131007093121.5624"><vh>GET cli/find/usr/&lt;关键字&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.14743"><vh>&lt;&lt;validate&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14734"><vh>表单JS验证</vh></v>
<v t="zoomq.20120727213305.14730"><vh>用户crx升级</vh>
<v t="zoomq.20120727213305.14723"><vh>crxup.html</vh></v>
</v>
<v t="zoomq.20130925103854.6418"><vh>POST /echo</vh>
<v t="zoomq.20130925103854.6419"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6420"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6421"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6422"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6423"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6424"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6425"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20131011103836.16656"><vh>chaos_CLI.py</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20120710140424.5446">creat API+admin srv for lb-crx publish mana.</t>
<t tx="zoomq.20120710140424.5447">@language markdown
# 珠海GDG 微信综合管理服务
~ base 珠三角技术沙龙活动综合管理应用

## 主要开发人员：
- ZQ @ZoomQuiet
- jeff @jeff_kit

## 主要功能

- 查询过往活动
- 报名参加指定活动
- 查询历史报名情况
- 查询社区关键信息
- 自动发送提醒邮件

## Change logging

- 130806 frok from gztechparty/techparty


</t>
<t tx="zoomq.20120710140424.5449">@language html
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN"&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" &gt;

&lt;&lt;sspathdefine&gt;&gt;

  &lt;title&gt;
{% block title4act %}
{% endblock%}- weknow v13.09.18.2&lt;/title&gt;

{% block headJS %}
{% endblock%}

    &lt;style type="text/css"&gt;
@others
    &lt;/style&gt;
&lt;/head&gt;

{% block body %}
&lt;body&gt;
{% endblock%}

&lt;div id="mainbody"&gt;
    {% block mainbody %}
    {% endblock%}
&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;hr/&gt;
    &lt;/div&gt;
&lt;div id="footbar"&gt;
    {% block footernav %}
    {% endblock%}
    |&lt;a href="http://crxdoczh.readthedocs.org/en/latest/5-more/lb4crx/index.html"&gt;帮助&lt;/a&gt;

    &lt;div id="poweredby"&gt;
    &lt;b&gt;powered by:&lt;/b&gt;
        &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;
        ,&lt;a href="http://bottle.paws.de/"&gt;Bottle&lt;/a&gt;
        ,&lt;a href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;
        ,&lt;a href="http://sae.sina.com.cn"&gt;SAE&lt;/a&gt;
        ,&lt;a href="http://www.catb.org/hacker-emblem/"&gt;Hacker&lt;/a&gt;
     &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

{% block footerJS %}
{% endblock%}
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20120710140424.5453">@language css
body{overflow-x:hidden}
body,img,a,div,span,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,textarea,th,td,tr,input{
    margin:0;padding:0
}
body { 
    background: #fefefe; color: #343434; 
    margin: 1em; padding: 0; font-size:105%;
}
h1,h2,h3,h4,h5,h6{
    margin:20px 0 10px 0;
    border-radius:5px;
    padding-left: 15px;
}
h1{
    background: #EBFAFF;
}
h2{
    background: #D1F4FF;
}
h3{
    background: #B8EEFF;
}
h4{
    background: #9EE8FF;
}

input,pre,body,button,select,textarea{
    font:14px/28px Segoe UI,Tahoma,Verdana,Arial,Helvetica,sans-serif
}


img { border: none }
hr {
  width : 100%;
  height : 2px;
  background : #efefef;
  border : 1px solid #ddd;
  clear : both;
}
div#poweredby{
  float : right;
}

a {color:#333;}
a:hover {color:blue;}

del {font-size:95%; color:#555;}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .btnw */
span.right{
    float:right;
}
.btnw{
    border:1px solid #ccc;
    height:42px;
    display:inline-block;
}
.btn::-moz-focus-inner{border:0}


@others



@-moz-document domain(){
    .btnw button{padding:0 27px 0 27px}
    }








</t>
<t tx="zoomq.20120710140424.5454">@language yaml
---
name: weknow
version: 3

</t>
<t tx="zoomq.20120710140424.5455">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)

'''
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)


from bottle import *
import sae

APP = Bottle()
application = sae.create_wsgi_app(APP)

@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    print request.query.keys()
    print request.query.echostr
    return request.query.echostr

'''
</t>
<t tx="zoomq.20120710140424.5456">#管理员邮箱列表
ADMIN_EMAIL_LIST = ['zoomquiet+gdg@gmail.com']
NIUNIU = datetime.datetime(2009, 5, 19)
@others

</t>
<t tx="zoomq.20120717112543.5481">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG
#from xsettings import XCFG
#_k4incr = CFG.TOT
KV = CFG.KV #sae.kvdb.KVClient()
BK = CFG.BK

@others

if __name__ == '__main__':
    if 2 != len(sys.argv) :
        print '''Usage:
            utility.py test
        '''
    else:
        print "hand testing ..."

</t>
<t tx="zoomq.20120717112543.5493">    '''
    #return "You missed a field."
    #"Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
    #return "You missed a field."
    #return template('upcrx.tpl')

    #return
    
    #print dir(data.file)
    #print type(data.file)
    # GET某个domain下的object
    #ob = s.get('crx4lb', data.filename)
    #print dir(ob)
    #print "\ttype(ob)", type(ob)
    #sdata = ob.data
    #print sdata
    #AppID = crx_id.GetCRXAppID4upload(data.file)
    #AppID = crx_id.GetCRXAppID4upload(sdata)
    #print 'AppID: %s' % AppID
    #data.file.seek(0)
    #print "data.file.closed", data.file.closed
    #print len(raw)
    raw = ""
    if name and data.file:
        while True:
            datachunk = data.file.read(1024)
            if not datachunk:
                break
            raw = raw + datachunk

        filename = data.filename

    try:
        buf = data.file.read(data.bufsize)
        while True:
            buf = data.file.read(data.bufsize)
            if not buf:
                break
            print data.bufsize
        #outfile.close()
        #return 'Uploaded %s !' % upfile.filename        
    except Exception,e:
        print e.message
        return 'Failed in uploading %s !' % data.filename

    @route('/upload', method='POST')
def do_upload():
    try:
        filename = request.POST.get('Filename')
        root, ext = os.path.splitext(filename)
        assert ext[1:].lower() in ALLOWED_TYPE, "Invalid file type: " + ext
        if not os.path.isdir(UPLOAD_BASE):
            os.makedirs(UPLOAD_BASE)
        filedata = request.POST.get('Filedata')
        assert filedata is not None, "Invalid Upload data."
        with open(os.path.join(UPLOAD_BASE, filename), 'wb') as f:
            shutil.copyfileobj(filedata.file, f, 8192)
    except AssertionError, e:
        abort(403, str(e))
    else:
        return filename

    '''
</t>
<t tx="zoomq.20120723102156.5539">@path 3party</t>
<t tx="zoomq.20120723102156.5541">@path module</t>
<t tx="zoomq.20120723102156.5543">@path web


- passwdaccess: if(path ~ "/up") passwd "up:up"
- passwdaccess: if(path ~ "/mana") passwd "mana:mana"

</t>
<t tx="zoomq.20120723102156.5544">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 全局值
class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind
    
    &lt;&lt;VERSION&gt;&gt;
    
    &lt;&lt;cfg4Borg&gt;&gt;
    
CFG = Borg()
print CFG.VERSION

</t>
<t tx="zoomq.20120723102156.5545">@language python
@tabwidth -4
# -*- coding: utf-8 -*-

&lt;&lt;declarations&gt;&gt;

from config import CFG
APP = Bottle()

#APP.mount('/up', __import__('mana4up').APP)
APP.mount('/api', __import__('mana4api').APP)
#APP.mount('/mana', __import__('mana4sys').APP)


@others

if __name__ == '__main__':
    debug(True)
    #0.0.0.0
    run(app, host="0.0.0.0",reloader=True)
</t>
<t tx="zoomq.20120723102156.5546">import sys   
#sys.path.append("..")  

from bottle import *
from bottle import __version__ as bottleVer
from bottle import jinja2_template as template
from config import JINJA2TPL_PATH
TEMPLATE_PATH.insert(0, JINJA2TPL_PATH)

</t>
<t tx="zoomq.20120723102156.5548">@APP.route('/')
#@view('404.html')
def index():
    return template('index.html')

</t>
<t tx="zoomq.20120723102156.5561">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
#print sys.path
from config import CFG
from xsettings import XCFG
KV = CFG.KV #sae.kvdb.KVClient(debug=1)
BK = CFG.BK
debug(True)

APP = Bottle()

@others






</t>
<t tx="zoomq.20120723102156.5562">import os
#关闭fetchurl，让httplib直接使用socket服务来连接
os.environ['disable_fetchurl'] = "1" 

import sys   
import time #import time, gmtime, strftime, localtime
from datetime import datetime
import traceback
import httplib
import urllib 
import urllib2
# 打开urllib2的debug开关
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPSHandler(1)))

import hashlib
import json
import string
import base64
import cPickle
#import ConfigParser
from os.path import splitext as os_splitext
from os.path import exists as os_exists

from copy import deepcopy
import xml.etree.ElementTree as etree

import pyfsm
from pyfsm import state, transition

from wechat.official import WxApplication, WxRequest, WxTextResponse, WxNewsResponse, WxArticle

from bottle import *
from bottle import __version__ as bottleVer
#from bottle import jinja2_template as template

from auth import _query2dict, _chkQueryArgs

from utility import INCR4KV as __incr
from utility import TSTAMP, GENID, USRID, DAMAID
from utility import ADD4SYS
from utility import PUT2SS

</t>
<t tx="zoomq.20120727213305.13050">@APP.route('/sysincr')
#@APP.route('/&lt;ddd&gt;/sysincr')
def sysincr():
    from utility import INCR4KV as __incr
    #kv = sae.kvdb.KVClient()
    #print  kv.get_info()
    return str(__incr())
    
    '''
    kv = sae.kvdb.KVClient()
    print dir(kv)
    print kv.get_info()
    print kv.get("TOT")
    
    if not kv.get("TOT"):
        kv.add("TOT", 1)
    print kv.get("TOT")
    print type(kv.get("TOT")+1)
    
    kv.replace("TOT",kv.get("TOT")+1)
    print kv.get("TOT")
    
    return str(kv.get("TOT"))
    '''



</t>
<t tx="zoomq.20120727213305.14698">import os
import sys
import traceback
from copy import deepcopy
from time import time, gmtime, strftime, localtime
import hashlib





</t>
<t tx="zoomq.20120727213305.14699">def INCR4KV():
    '''BASE KVDB make GLOBAL increaser
    '''
    #print CFG.KEY4_incr
    #print None == CFG.KV.get(CFG.KEY4_incr)
    if None == KV.get(CFG.K4D['incr']):
        #print "\t EMPTY?!"
        KV.add(CFG.K4D['incr'], 0)
    else:
        #print "\t incr. BASE HISTORIC"
        KV.set(CFG.K4D['incr'], KV.get(CFG.K4D['incr'])+1)
    return KV.get(CFG.K4D['incr'])





</t>
<t tx="zoomq.20120727213305.14705">@language html
{% extends "base.html" %}

{% block title4act %}
404
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat:404(Bottle版) &lt;/h1&gt;

&lt;h2&gt;真心没作呢,介事儿&lt;/h2&gt;

吼这位:-(
&lt;pre&gt;
zoomquiet+lb4crx2srv # gmail.com
&lt;/pre&gt;
{% endblock %}

{% block footernav %}
:-[
{% endblock %}



</t>
<t tx="zoomq.20120727213305.14707">#@view('404.html')
@APP.error(404)
def error404(error):
    return '''


\          SORRY            /
 \                         /
  \    This page does     /
   ]   not exist yet.    [    ,'|
   ]                     [   /  |
   ]___               ___[ ,'   |
   ]  ]\             /[  [ |:   |
   ]  ] \           / [  [ |:   |
   ]  ]  ]         [  [  [ |:   |
   ]  ]  ]__     __[  [  [ |:   |
   ]  ]  ] ]\ _ /[ [  [  [ |:   |
   ]  ]  ] ] (#) [ [  [  [ :===='
   ]  ]  ]_].nHn.[_[  [  [
   ]  ]  ]  HHHHH. [  [  [
   ]  ] /   `HH("N  \ [  [
   ]__]/     HHH  "  \[__[
   ]         NNN         [
   ]         N/"         [
   ]         N H         [
  /          N            \

/                           \

roaring zoomquiet+404@gmail.com
'''
#    return template('404.html')

@APP.route('/favicon.ico')
def favicon():
    abort(204)
    
@APP.route('/static/&lt;filename&gt;')
def server_static(filename):
    return static_file(filename, root='static')
    </t>
<t tx="zoomq.20120727213305.14715">@path templates

#for local debug:
{% set sspath4pic = "http://localhost:8080/stor-stub/pic2lb" %}
{% set sspath4crx = "http://localhost:8080/stor-stub/crx4lb" %}

#for SAE debug:
{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}

{% set sspage2crx = "http://lb4crx-page4crx.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120727213305.14717">@language html
{% extends "base.html" %}

{% block title4act %}
index
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat 响应后台(Bottle版) =&lt;/h1&gt;

是也乎;-)


{% endblock %}

{% block footernav %}
:-}
{% endblock %}


</t>
<t tx="zoomq.20120727213305.14723">@language html
{% extends "base.html" %}

{% block title4act %}
up
    {% endblock %}

{% block headJS %}
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}

{% block mainbody %}
&lt;h2&gt;猎豹国产原创扩展:上传&lt;/h2&gt;

&lt;form action="/up/crx" method="post" enctype="multipart/form-data" class="validate"&gt;
  名称:&lt;input type="text" name="name" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;
  文件:&lt;input type="file" name="data" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;

&lt;span id="reply_submit" class="btnw"&gt;
    &lt;button type="submit" class="action"&gt;就酱&lt;/button&gt;
&lt;/span&gt;

&lt;/form&gt;
    {% endblock %}

{% block footernav %}
:-]
    {% endblock %}

</t>
<t tx="zoomq.20120727213305.14728">基础模板组
</t>
<t tx="zoomq.20120727213305.14730"></t>
<t tx="zoomq.20120727213305.14734">
{% block headJS %}
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}
</t>
<t tx="zoomq.20120727213305.14737">@language html
导航:&lt;a href="/"&gt;首页&lt;/a&gt;
|&lt;a href="/mana"&gt;管理&lt;/a&gt;
|&lt;a href="/api"&gt;接口&lt;/a&gt;


</t>
<t tx="zoomq.20120727213305.14743">@language js
new FormValidator('upcrxform', [{
    name: 'crxname',
    display: 'required',    
    rules: 'required|min_length[4]'
}, {
    name: 'crxfile',
    display: 'required',    
    rules: 'required'
}], function(errors, event) {
    var SELECTOR_ERRORS = $('.error_box'),
        SELECTOR_SUCCESS = $('.success_box');
        
    if (errors.length &gt; 0) {
        SELECTOR_ERRORS.empty();
        
        for (var i = 0, errorLength = errors.length; i &lt; errorLength; i++) {
            SELECTOR_ERRORS.append(errors[i].message + '&lt;br /&gt;');
        }
        
        SELECTOR_SUCCESS.css({ display: 'none' });
        SELECTOR_ERRORS.fadeIn(200);
    } else {
        SELECTOR_ERRORS.css({ display: 'none' });
        SELECTOR_SUCCESS.fadeIn(200);
    }
    
    if (event &amp;&amp; event.preventDefault) {
        event.preventDefault();
    } else if (event) {
        event.returnValue = false;
    }
});

</t>
<t tx="zoomq.20120727213305.14749">@language css

/**
 * TERMS OF USE - Validatious 2.0
 * Open source under the BSD License.
 * Copyright 2008 Christian Johansen.
 * All rights reserved.
 */
.error{color:#900;background:#f8f8f8;}
.error .messages,.error .messages li{list-style:none;}
.error .messages{font-size:1em;padding:.6667em 0 0 1em;}
</t>
<t tx="zoomq.20120727213305.14750">import sys
from os import uname
import datetime

import os.path
app_root = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(app_root, "3party/"))
sys.path.insert(0, os.path.join(app_root, "module/"))
sys.path.insert(0, os.path.join(app_root, "web/"))
#   指定的模板路径
JINJA2TPL_PATH = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__)
        , "templates/")
    )

#import hashlib</t>
<t tx="zoomq.20120727213305.14756">def INIobjSYS(key):
    '''try and init. all kinds of objSYS K/V
    '''    
    if key not in CFG.K4D.keys():
        return None
    else:
        #print CFG.K4D[key]
        if not KV.get(CFG.K4D[key]):
            KV.add(CFG.K4D[key],[])
        return (CFG.K4D[key], KV.get(CFG.K4D[key]))




</t>
<t tx="zoomq.20120727213305.14772">.btnw button {
    font-size:16px;
    text-align:center;
    overflow:visible;
    height:42px;
    padding:0 28px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw button:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw button:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}

</t>
<t tx="zoomq.20120727213305.14773">.btnw a {
    text-decoration: none;
    font-size:16px;
    text-align:center;
    overflow:visible;
    padding:0 28px;
    height:40px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120727213305.14781">#iterm sub{
    float: right; padding: 0; margin: 5px 0 0 0; 
    border-bottom: 1px dotted #ccc;
    height:22px; line-height:22px; 
    overflow:hidden;
}

#iterm .btnwa{
    display:inline-block;
    border:1px solid #ccc;
    height:22px;
}
#iterm .btnwa a {
    text-decoration: none;
    font-size:12px;
    text-align:center;
    overflow:visible;
    padding:0 18px;
    height:22px;
    line-height:22px;
    vertical-align:text-bottom;

    z-index:1;
    display:inline-block;
    border:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

#iterm .btnwa a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

#iterm .btnwa a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120802192540.5468">def GENID(obj, name=""):
    '''通用ID生成器:
        yymmddHHMMSS+5位微秒+对象鍵3位+全局序号
        - 对分标签的文章分级选择,包含额外标识信息:
            - dd_ 前缀就是分类 tag
            - __** 后缀就是指定的文章编号
    '''
    timestamp = TSTAMP()
    tot = INCR4KV()
    #sha1name = hashlib.sha1(name).hexdigest()
    GOBJMAP = {'his':'h_%(timestamp)s_HIS%(tot)d'
        ,'bkup':'bk_%(timestamp)s_SG%(tot)d_%(name)s'
        ,'tag':'t_%(timestamp)s_TAG%(tot)d'
        ,'event':'e_%(timestamp)s_EVE%(tot)d'
        ,'paper':'p_%(timestamp)s_PUB%(tot)d'
        ,'ot':'ot_%(timestamp)s_PUB%(tot)d'
        ,'gb':'gb_%(timestamp)s_PUB%(tot)d'
        ,'dd':'dd_%(timestamp)s_PUB%(tot)d'
        ,'gt':'gt_%(timestamp)s_PUB%(tot)d'
        ,'dm':'dm_%(timestamp)s_PUB%(tot)d'
        ,'hd':'hd_%(timestamp)s_PUB%(tot)d'
        ,'et':'et_%(timestamp)s_PUB%(tot)d'
        #,'dm':'m:%(timestamp)s:DM%(tot)d'
        ,'fw':'fw_%(timestamp)s_PUB%(tot)d'
        }
    if obj in GOBJMAP.keys():
        return GOBJMAP[obj]% locals()
    else:
        return None


</t>
<t tx="zoomq.20120802192540.7100">def TSTAMP():
    '''通用时间戳生成器:
        yymmddHHMMSS+5位微秒
        e.g.
        12080110561431076
    '''
    date = strftime("%y%m%d%H%M%S", localtime())
    mms = "%.5f"% time()
    ms = mms[-5:]
    return "%s%s"% (date, ms)




</t>
<t tx="zoomq.20120804110957.4147">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ by 42qu.com 
input,button,select,textarea{font-size:16px;line-height:28px}

*/
input,button,select,textarea{
    font-size:14px;line-height:28px
}
div{cursor:default}

input{  
    font-size:22px;
    line-height:36px;
    height:42px;
    padding:4px 3px;
    border:1px solid #ddd;
    width:27em;
}
input.checkbox{
    font-size:22px;
    line-height:24px;
    height:24px;
    width:auto;

}  

#optradios input{
    font-size:18px;line-height:22px;height:26px;
    padding:0px;
    border:1px solid #ddd;
    width:1em;
}
    
select{
    font-size:16px;line-height:18px;
    padding:8px;
    text-align:center;border:1px solid #ccc;
    margin-right:8px;
    width:120px;
}

textarea{
    font-size:22px;
    overflow:auto;resize:none;
    border:1px solid #ccc;
    padding:4px 3px;
    margin:0;
    width:27em;
}
</t>
<t tx="zoomq.20120804110957.4148">ul li {font-size:120%;
    line-height: 36px;
    border-top:1px dotted #aaa;
    width:98%;
    list-style-type:none;
    padding: 5px 0px 0px 10px;
}
ul li.textarea3 {
    height: 108px;
    border: 0px dotted #930;
}
ul li.textarea1 {
    height: 50px;
    border: 0px dotted #930;
}
.even{
    background: #FFF4DB;
}
ul.asform li{
    display:inline-block; 
    vertical-align:top; 
    border-top:0px dotted #aaa;
}
.leftlabel{
    float: left;
}
.rightinput{
    float: right;
}
span.label{
    display:inline-block; 
    border: 1px solid #777;
    width:7em;
    padding: 5px;
    text-align:right;
}

ol li {font-size:120%;
    line-height: 24px;
    border-bottom:1px dotted #aaa;
    width:90%;
    list-style-type:none;
    margin-left: 20px;
}

sub,sup {font-size:10px; }
fieldset sub{
    color:#999;
}


fieldset{
    margin-top: 10px;
    padding: 20px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}
fieldset i{
    font-size: 70%;
    color: #787;
    margin-top: 10px;
    line-height:36px;
}

</t>
<t tx="zoomq.20120804110957.4149">b.alert{
    font-size: 150%;
    color: #930;
}


pre {
    font-weight：lighter;
    font-size: 80%;
    border: 4px dotted #fefefe;
    background : #ededed;
    padding: 5px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}

pre.desc {
    font-size: 14px;
    border: 2px dotted #ddd;
    background : #fefefe;
    padding: 10px;
    border-radius: 15px 0px 15px 0px;
    width:70%;
    display:inline-block;
}
</t>
<t tx="zoomq.20120812115324.4334">{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120820121523.7422">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG
KV = CFG.KV
from xsettings import XCFG

@others

</t>
<t tx="zoomq.20120820121523.7423">'''base: ms4py / bottle-wiki / source — Bitbucket
	https://bitbucket.org/ms4py/bottle-wiki/src/1586473a6ce1/auth.py
'''
import sys
from time import time, gmtime, strftime, localtime
import base64
import urllib2 as urilib
from base64 import urlsafe_b64encode

from hashlib import md5
from hashlib import sha256
from functools import partial

from bottle import request, HTTPError

</t>
<t tx="zoomq.20120820121523.7424">def check_login(username, password, fullpath):
    '''根据用户名,以及口令:
        - 明确是否登录
        - 明确是否有当前级别的权限!
    '''
    pw_hash = sha256_uhex(password)
    suname = sha256_uhex(username)
    usrid = "%s%s"% (CFG.PREUID, suname)
    crtusr = KV.get(usrid)
    #print fullpath.split("/")[1]
    #print type(CFG.LEVEL4USR[fullpath.split("/")[1]])
    #print type(crtusr['level'])
    if crtusr:
        crtPathLevel = CFG.LEVEL4USR[fullpath.split("/")[1]]
        if str(crtPathLevel) == str(crtusr['level']):
            print "'%s' had crt. path right ;-)"% username
            return True
        else:
            print "'%s' disallow crt. path ;-("% username
            return False
    else:
        print "'%s' NOT exist!"% username
        return False
    '''
    #print fullpath.split("/")[1]
    print CFG.LEVEL4USR[fullpath.split("/")[1]]
    usr = 1#KV.get("usr:%s"% str(sha256_uhex(username.decode('utf-8'))))
    if usr is None:
        return False
    #return usr.password == pw_hash
    return 1
    '''

</t>
<t tx="zoomq.20120820121523.7425">def auth_required(check_func=check_login, realm='bottle-authentication'):
    """
    Decorator for basic authentication. 
    
    "check_func" has to be a callable object with two 
    arguments ("username" and "password") and has to return 
    a bool value if login was sucessful or not.
    """
    def decorator(view):
        def wrapper(*args, **kwargs):
            try:
                user, password = request.auth
            except (TypeError, AttributeError):
                # catch AttributeError because of bug in bottle
                auth = False
            else:
                auth = check_login(user, password, request.fullpath)
                #print "\t path: ", request.keys()
                #print request.fullpath
            if auth:
                return view(*args, **kwargs)
            return HTTPError(401, 'Access denied!', 
                header={'WWW-Authenticate': 'Basic realm="%s"' % realm})
        return wrapper
    return decorator

</t>
<t tx="zoomq.20120820121523.7426">def sha256_uhex(data):
    ''' Generates unicode hex value of given data with SHA-256. '''
    return str(unicode(sha256(data).hexdigest()))
</t>
<t tx="zoomq.20130918155053.5760">@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    '''wechat app token echo
    '''
    #print request.query.keys()
    #print request.query.echostr
    #print request.query_string
    #print dir(BaseRequest.query_string)
    return request.query.echostr

'''
def wechat(request):
    app = EchoApp()
    result = app.process(request.GET, request.body, token='your token')
    return HttpResponse(result)
'''

</t>
<t tx="zoomq.20130918155053.7083">@APP.post('/echo/')
@APP.post('/echo')
def wechat_post():
    # usage jeff SDK for wechat...
    if CFG.AS_SAE:
        wxa = WxApplication(token=XCFG.TOKEN)
        chkwx = wxa.is_valid_params(request.query)
        if not chkwx:
            return None
    else:
        print "Debugging localhost..."
    ## 注意! 从公众号来的消息和订阅号完全不同的,需要另外解析!
    #print "request.forms.keys()[0]\t\n", request.forms.keys()[0]
    wxreq = WxRequest(request.forms.keys()[0])
    G_CRT_USR = __chkRegUsr(wxreq.FromUserName)
    wxreq.crt_usr = G_CRT_USR
    # usage pyfsm as FSM echo all kinds of usr ask
    weknow = pyfsm.Registry.get_task('weknow')
    #print G_CRT_USR
    wxreq.FSM = "start2" # 使用对象加载状态区分后续处理
    # 恢复用户 FSM 状态
    if G_CRT_USR['fsm']:
        #print "if G_CRT_USR"
        weknow.start2(G_CRT_USR['fsm'], wxreq)
    else:
        #print "else G_CRT_USR"
        weknow.start2('setup', wxreq)
        G_CRT_USR['fsm'] = "setup"
        __update_usr(G_CRT_USR)
    #return None
    # 执行用户 FSM 业务
    wxreq.FSM = "send2"
    return weknow.send2(wxreq.Content.strip(), wxreq)











</t>
<t tx="zoomq.20130918155053.7084">&lt;&lt;ALIAS&gt;&gt;
@others


'''
2013/09/23 12:13:56] -  &lt;xml&gt;
     &lt;ToUserName&gt;&lt;![CDATA[oFNShjiOhclfJ-CtOO81p2sPrBfs]]&gt;&lt;/ToUserName&gt;
     &lt;FromUserName&gt;&lt;![CDATA[gh_5e32c47b5b23]]&gt;&lt;/FromUserName&gt;
     &lt;CreateTime&gt;13092312135634476&lt;/CreateTime&gt;
     &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
     &lt;Content&gt;&lt;![CDATA[本公众号的自动回答范畴：
    - GDG活动报名、签到、直播
    - GDG大妈联系查询
    - GDG发表文章查阅
    功能正在完善中，欢迎反馈。
    更多请惯性地输入 h 继续吧 :)
    ]]&gt;&lt;/Content&gt;
     &lt;/xml&gt; yq34 
'''
&lt;&lt;XML模板&gt;&gt;

</t>
<t tx="zoomq.20130918155053.8973">@language python
@tabwidth -4


</t>
<t tx="zoomq.20130923093950.3647">import sae.kvdb
KV = sae.kvdb.KVClient()
#   系统索引名-UUID 字典; KVDB 无法Mongo 样搜索,只能人工建立索引
K4D = {'incr':"SYS_TOT"     # int
    ,'m':"SYS_usrs_ALL"     # [] 所有 成员 (包含已经 del 的)
    ,'dm':"SYS_dama_ALL"    # [] 所有 组委-&gt;uuid (包含已经 del 的)
    ,'fw':"SYS_fw_ALL"      # { 'pp':[fw_uuid,,],,,} 
    #,'pp':"SYS_uuid_WX"     # [] 所有 wx_Passport-&gt;m_UUID 的反向映射 不用索引,但是存在!
    ,'p':"SYS_pubs_ALL"     # [] 所有 文章 (包含已经 del 的)
    ,'e':"SYS_eves_ALL"     # [] 所有 活动 (包含已经 del 的)
    ,'his':"SYS_node_HIS"   # [] 所有 节点的K索引 (包含已经 del/覆盖 的)
}
&lt;&lt;FW actions&gt;&gt;
#KEY4_incr = K4D['incr']
for k in K4D:
    if None == KV.get(K4D[k]):
        if 'incr' == k:
            KV.add(K4D[k], 0)
        elif 'fw' == k:
            KV.add(K4D[k], {'sequence':[]})
        else:
            KV.add(K4D[k], [])
'''
    else:
        if 'incr' == k:
            print K4D[k], '%s as '% KV.get(K4D[k])
        else:
            print K4D[k], 'hold %s nodes'% len(KV.get(K4D[k]))
'''

&lt;&lt;MEMBER&gt;&gt;

&lt;&lt;大妈们&gt;&gt;

&lt;&lt;CONTENT&gt;&gt;

&lt;&lt;FW POOL&gt;&gt;

&lt;&lt;HISTORIC&gt;&gt;


</t>
<t tx="zoomq.20130923093950.5395">ESSAY_TAG = {'ot':u" ~ 其它 (其余文章,AT也很好;)"
    , 'gb':u" ~ G术图书 (推荐好书,书无中外)"
    , 'dd':u" ~ D码点评 (麻辣评点,善意满盈)"
    , 'gt':u" ~ G说公论 (时评杂文,新旧不拘)"
    , 'dm':u" ~ 珠的自白 (大妈自述,每周一篇)"
    , 'hd':u" ~ 海选文章 (得要相信,大妈法眼)"
    , 'et':u" ~ 活动报道 (快乐大趴,给力小会)"
    }
    
# 文章索引
K4WD = {"his_id":""   # 更新戮
    , "del":0
    , "type":"txt"  # 信息类型 txt|uri|pic
    , "tag":"ot"
    , 'title':''
    , "desc":""     # 解释
    , "code":""     # 文章,分类序号
    , "picurl":''
    , "url":""
    }
    


</t>
<t tx="zoomq.20130923093950.5396">#   历史操作 键-名字典
K4H = {'C':"Create"
    ,'D':"Delete"
    ,'U':"Update"
    }
#'uuid':""     # 历史版本扩展ID
objHis = {'hisobj':""
    ,'actype':"..."     # 操作类型C|D|U~ Create|Delet|Update = 创建|删除|更新
    ,'dump':''        # 数据集
    }


</t>
<t tx="zoomq.20130923093950.5397">objUSR={"his_id":""   # 更新戮
    , "lasttm": ''  # time.time()
    , "del":0
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    
    , "fsm":""      # 有限状态机 当前状态
    , "buffer":""   # 有限状态机 前次选择指令
    , "pp":''       # 订阅号 关注者 Passport 
    , 'openid':''   # 公众号 关注人 openid

    , "nm":""       # NickName "Zoom.Quiet"
    , "desc":""     # 自述
    , 'em':''       #'zhouqi@ijinshan.com',
    , "mo":""       # Mobile Phone
}
    


</t>
<t tx="zoomq.20130923093950.7285">TPL_TEXT='''&lt;xml&gt;
&lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
&lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
&lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
&lt;Content&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Content&gt;
&lt;/xml&gt;'''

TPL_URIS='''&lt;xml&gt;
&lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
&lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
&lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
&lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;
&lt;ArticleCount&gt;%(item_count)d&lt;/ArticleCount&gt;
&lt;Articles&gt;
%(items)s
&lt;/Articles&gt;
&lt;/xml&gt; 
'''

TPL_ITEM='''&lt;item&gt;
&lt;Title&gt;&lt;![CDATA[%(title)s]]&gt;&lt;/Title&gt; 
&lt;Description&gt;&lt;![CDATA[%(description)s]]&gt;&lt;/Description&gt;
&lt;PicUrl&gt;&lt;![CDATA[%(picurl)s]]&gt;&lt;/PicUrl&gt;
&lt;Url&gt;&lt;![CDATA[%(url)s]]&gt;&lt;/Url&gt;
&lt;/item&gt;
'''


</t>
<t tx="zoomq.20130923093950.8563">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130923093950.8564">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130923093950.8565">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130923093950.8566">return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130923093950.8567">if "" == crt_usr['em']:
    # 1st ping
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% crt_usr['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''

</t>
<t tx="zoomq.20130923093950.8569"># 大妈们的联系方式
K4DM = {"his_id":""   # 更新戮
    , "del":0
    , "pp":''       # Passport "kswl662773786"

    , "nm":""       # NickName "Zoom.Quiet"
    , "desc":""     # 解释
    , 'em':''       # 'zhouqi@ijinshan.com',
    , 'mo':''       # Mobile
    }


</t>
<t tx="zoomq.20130923093950.8570">def __echo_txt(fromUsr, toUsr, text):
    '''zip xml exp.
    '''
    tStamp = int(time.time())    #TSTAMP()
    fromUser = fromUsr
    toUser = toUsr
    content = text
    print CFG.TPL_TEXT% locals()
    return CFG.TPL_TEXT% locals()

</t>
<t tx="zoomq.20130923093950.8816">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
crt_usr['em'] = em
KV.replace(usrs[0][0] , crt_usr)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130923093950.8817">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130923093950.8818">CMD_ALIAS=('h', 'H', 'help', '?'    # 帮助
    , 'v', 'V', 'version', 'log'    # 版本
    , 'i', 'I', 'me', 'ei'          # 订户信息
    , 's', 'S'                      # 文章检索
    #   开发中:::
    , 'dd', 'aa', 'cc', 'mm'        # FW 回答
    
    #   隐藏功能:::
    , 'e', 'E'                      # 活动问询
    , 're', 'rc', 'ri'              # 活动报名
    , 'st', 'stat'                  # 系统状态
    , 'nn'                          # 牛妞日记
    )

DM_ALIAS = {"LXC": ['Bonnie', 'liuxinchen', 'lxc', 'LXC', u'刘星辰']
    , "ZQ": ['Zoom.Quiet','zq', 'zoomq', 'ZQ', u'ZQ大妈', u'大妈', u'周琦']
    , "LG": ['Spawnris','GJT', 'gaojunten', 'LG', 'lg', 'spawnris', u'老高', u'高骏腾']
    , "LQX": ['LQX', 'lqx', 'langqixu', u'小郎', u'郎启旭']
    }

</t>
<t tx="zoomq.20130925103854.4951">APIPRE = "/cli" #% _API_ROOT
STLIMI = 4.2    # 请求安全时限(秒)
SECURE_ARGS = ('appkey', 'ts', 'sign')
CLI_MATTERS = {     # 命令行响应方式速查字典
    "his/last":   "GET"       # 最后一次节点(任意)修订
    , "echo":       "GET"       # 模拟wechat 问答
    , "info":   "GET"          # 查阅 指定 信息
    &lt;&lt;CLI4usr&gt;&gt;
    &lt;&lt;CLI4pub&gt;&gt;
    
    , "st/kv":      "GET"       # 查阅 KVDB 信息
    
    &lt;&lt;CLI4sys&gt;&gt;
    &lt;&lt;CLI4wx&gt;&gt;    
    }

CLI_URI = {     # 命令行 请求外部系统URI 速查字典
    "wx/t":     ("api.weixin.qq.com"
        , "/cgi-bin/token?grant_type=client_credential&amp;appid=%(appid)s&amp;secret=%(secret)s"
        )     # 获取 token
    , "wx/ls":  ("api.weixin.qq.com"
        , "/cgi-bin/user/get?access_token=%(token)s"
        )     # 获取关注列表
    , "wx/usr": ("api.weixin.qq.com"
        , "/cgi-bin/user/info?access_token=%(token)s&amp;openid=%(openid)s"
        )     # 获取成员信息
    , "wx/msg": ("api.weixin.qq.com"
        , "/cgi-bin/message/custom/send?access_token=%(token)s"
        , "POST")     # 发送消息
    }
#https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=ACCESS_TOKEN

LEVEL4USR = {"mana":0
    , "up":1
    , "api":2
    }


</t>
<t tx="zoomq.20130925103854.4957">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
#!/usr/bin/env python
&lt;&lt;docopt&gt;&gt;
&lt;&lt;declarations&gt;&gt;
AS_LOCAL = "http://localhost:8080/api"

@others

if __name__ == '__main__':
    '''为了简化 后台控制的界面开发,快速实现远程控制:
        - 通过 RESTful 接口,从本地使用工具脚本实施管理事务!
    主要功能:
        - 模拟微信的服务端消息转发,进行消息应答测试
        - (模拟短信客户端向微信服务端发送消息,驱动真实测试)
        - 自动生成含安全认证的网络请求,将各种操作指令格式化为http 请求,并自动发送
        ...
    '''
    arguments = docopt(__doc__, version='lbTCLI v13.09.03b')
    metter = arguments.get('&lt;matter&gt;')
    debug = arguments.get('--debug')
    sets = arguments.get('&lt;sets&gt;')
    #print sets
    smart_rest(metter, sets)
    #_rest_main(method, uri, args)

</t>
<t tx="zoomq.20130925103854.4958">"""CLI for WeKnow.

Usage:
  CLI.py [--debug] &lt;matter&gt; [&lt;sets&gt;]
  CLI.py -h | --help
  CLI.py -D | --debug    向本地接口发送请求
  CLI.py -V | --version

Options:
  -h --help     Show this screen.
  -V --version  Show version.
  -D --debug    对本地系统测试时专用参数
  &lt;matter&gt;      事务URI
  &lt;sets&gt;        数据设定

e.g:
  一般形式::
  $ python CLI.py 事务指令 [可能的值设定 set=** 形式]
  详细操作::
  echo set=i                模拟微信的消息交互

  info/:UUID                查阅指定 信息
  find/m/&lt;key word&gt;         搜索用户 [对 名称,描述 搜索]
  st/kv     查询 KVDB 整体现状
  sum/bk|db|dm|m|e|p|his|fw
            查询 备份|整体|大妈|成员|活动|文章|历史|转抄 现状
    sum/p/:TAG 综合 分类文章 信息现状
  fix/dm/:NM  nm=ZQ         修订/创建指定 大妈 的相关信息
  fix/m|e/:UUID nm=ZQ       修订指定 成员|活动 的相关信息
  fix/p/:TAG/:UUID url=***  增补|指定 文章 信息
    TAG当前支持 ot|et|gt|dd|gb|dm|hd
    UUID 为 null 时,指创建文章信息
  del/p/:UUID   删除指定文章
  fw/ll         模拟 大妈 刷 成员抄发消息
  fw/dd/:UUID   模拟 指成员 刷 大妈回复
  fw/mm/:ZIP set='订户编号'   
                模拟 大妈 忽略指定消息
  fw/aa/:ZIP set='回答内容'    
                模拟 大妈 回复指定消息
  
  !!! 小心:大规模数据I/O操作 !!!
  push/p json=path/2/x.json 提交批量文章数据文件
  bk/db|dm|m|e|p
     备份 KVDB|大妈|成员|活动|文章 数据到Storage
  del/bk/:UUID              删除指定备份 dump
  revert/db|dm|m|e|p    set=备份dump
     恢复 KVDB|大妈|成员|活动|文章 数据到Storage
  resolve/his|wx|fw        set=all       
    重建 HIS|Passpord|FW 全局索引内容

益rz...
  wx/ls             通过 服务号测试接口 获取关注列表 
  wx/usr/:openid    通过 服务号测试接口 获取指定关注用户信息
"""
</t>
<t tx="zoomq.20130925103854.4959">import sys
import os
import base64
from subprocess import Popen
from time import time, gmtime, strftime, localtime

import httplib, urllib
import urllib2
# 打开urllib2的debug开关
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPSHandler(1)))

import json

from docopt import docopt

from config import CFG
from xsettings import XCFG
from module.auth import _genQueryArgs, _genArgsStr
</t>
<t tx="zoomq.20130925103854.4960">def _rest_main(method, uri, args, host=AS_LOCAL):
    '''接受事务指令+数据, 合理拼成 hhtp 命令行:
        - GET/DELETE 时将参数拼为统一间隔字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
    '''
    if 'PUT' == method: 
        &lt;&lt;PUT&gt;&gt;
    elif 'POST' == method:
        &lt;&lt;POST&gt;&gt;
    elif 'HTTPS' == method:
        &lt;&lt;HTTPS&gt;&gt;
    else:
        if "echo" == uri:
            &lt;&lt;echo matters&gt;&gt;
        else:
            &lt;&lt;GET DEL&gt;&gt;
    #print cmd
    Popen(cmd, shell=True, close_fds=True)
    #print p.stderr

    </t>
<t tx="zoomq.20130925103854.4961">def smart_rest(matter, sets):
    '''确保所有操作元语为 两节,其它作为附加参数...
    '''
    if "echo" == matter:
        _rest_main(CFG.CLI_MATTERS[matter], matter, sets)
    else:
        cmd = matter
        mess = matter.split("/")
        # 服务端的指令只有两节,其它的是动态数据,所以,进行净化
        if 2 &lt; len(mess):
            matter = "/".join(mess[:-1])
        elif 'info' == mess[0]:
            matter = mess[0]
        
        # 然后进行分拣 协议情况生成请求
        if matter in CFG.CLI_MATTERS.keys():  
            method = CFG.CLI_MATTERS[matter]      
            if debug:
                _rest_main(method, cmd, sets)
            else:
                _rest_main(method, cmd, sets, host = XCFG.TO_SAE)
        else:
            print "smart_rest()\n\t参数错误,请使用 -h 参阅手册..."



</t>
<t tx="zoomq.20130925103854.5007"># echo for RESTful remote actions
'''[api]RESTful管理事务设计 on lbTC-开发协调 | Trello
	https://trello.com/c/ztdsulpM/82-api-restful
- 全部基于: `/api/cli` 前缀
    - 版本区隔为: `/api/v2/cli` 前缀
- 签名检验
- 时间检验(4.2秒以内, 并发不得超过 `N` 次)
query_string 
'''

</t>
<t tx="zoomq.20130925103854.5033"># collection usr ACL matter
'''

  统计节点(任意)修订次数
    sum/his
  检阅最后一次节点(任意)修订
    his/last

'''</t>
<t tx="zoomq.20130925103854.5034">@APP.get('/cli/sum/his/&lt;qstr&gt;')
def sum_tag(qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/his", q_dict, "GET"):
        data = []
        for u in CFG.HIS.find({}
            , {'_id':0, 'usrid':1, 'hisobj':1, 'uuid':1, 'actype':1}
            , limit=2):
            data.append(u)
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.HIS.find({}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5035">@APP.get('/cli/his/last/&lt;qstr&gt;')
def sum_tag(qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/his/last", q_dict, "GET"):
        #data = []
        q_mongo = CFG.HIS.find({},{'_id':0},limit=1).sort("uuid", pymongo.DESCENDING)
        #print q_mongo[0] cPickle.loads('N.')
        return {'msg':"safe quary;-)"
            , 'data':q_mongo[0]
            , 'count': CFG.HIS.find({}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5041"># collection usr ACL matter
'''
'''
</t>
<t tx="zoomq.20130925103854.5049">@APP.get('/cli/sum/&lt;matter&gt;/&lt;qstr&gt;')
def st_kv(matter, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/%s"% matter, q_dict, "GET"):
        feed_back = {'data':[]}

        if 'db' == matter:
            &lt;&lt;sum db&gt;&gt;        

        elif 'bk' == matter:
            &lt;&lt;sum bk&gt;&gt;

        elif 'dm' == matter:
            &lt;&lt;sum dm&gt;&gt;

        elif 'fw' == matter:
            &lt;&lt;sum fw&gt;&gt;
            
        else:
            &lt;&lt;sum others&gt;&gt;

        return feed_back
    else:
        return "alert quary !-("


</t>
<t tx="zoomq.20130925103854.6406">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sys   
#sys.path.append("..")  


</t>
<t tx="zoomq.20130925103854.6418">@APP.post('/echo')
@APP.post('/echo/')
def wechat_post():
    #print request.forms.keys()[0]
    xml = etree.XML(request.forms.keys()[0])
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    sha1_name = hashlib.sha1(toUser).hexdigest()
    pre_uuid = "u:%s"% sha1_name
    __MsgType = xml.findtext("MsgType")
    Content = xml.findtext("Content") #.encode('utf8')
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;
        
    







</t>
<t tx="zoomq.20130925103854.6419">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130925103854.6420">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
member = usrs[0][1] 
member['em'] = em
KV.replace(usrs[0][0] , member)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130925103854.6421">usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
print usrs
print "CFG.TOT ", CFG.TOT
if 0 == len(usrs):
    # 1st ping
    print "sha1_name: ", sha1_name
    uuid = GENID('usr', name = sha1_name)
    new_usr = deepcopy(CFG.objUSR)
    new_usr['his_id'] = GENID('his')
    new_usr['pp'] = toUser
    new_usr['lasttm'] = time.time()
    print uuid, new_usr
    KV.add(uuid, new_usr)
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    member = usrs[0][1]
    if "" == member['em']:
        return __echo_txt(fromUser, toUser, CFG.TXT_PLS_EM)
    else:
        return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% member['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''
'''
objUSR={"uuid":""            
    , "his_id":""   # 更新戮
    , "del":0
    , "fsm":""      # 有限状态机 当前状态
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    , "lasttm": ''  #"2013-07-05 19:01:33",
    }    
'''


</t>
<t tx="zoomq.20130925103854.6422">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130925103854.6423">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130925103854.6424">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130925103854.6425">pass
#return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130925103854.6426">def __chkRegUsr(passport):
    '''chk or init. webchat usr.:
        - gen KV uuid, try get
        - if no-exited, init. fsm
    '''
    #sha1_name = hashlib.sha1(passport).hexdigest()
    uuid = USRID(passport)
    ADD4SYS('m', uuid)  # for old sys, collected uuid into idx node!
    usr = KV.get(uuid)
    # 检查反向索引键对
    ppu = KV.get(passport)
    if not ppu:
        # inti.
        KV.add(passport, uuid)
    # 检查用户键值对
    &lt;&lt;chk USR2PP&gt;&gt;





</t>
<t tx="zoomq.20130925103854.6427">def __update_usr(objUsr):
    #sha1_name = hashlib.sha1(objUsr['pp']).hexdigest()
    uuid = USRID(objUsr['pp'])
    #   stamp updated
    objUsr['his_id'] = GENID('his')
    KV.replace(uuid, objUsr)



</t>
<t tx="zoomq.20130925103854.6429">def USRID(Passpord):
    '''base Passpord make UUID
    '''
    sha1_name = hashlib.sha1(Passpord).hexdigest()
    return 'u_%s'% sha1_name



</t>
<t tx="zoomq.20130925103854.6430">@state('weknow')
@transition('e', 'events')
@transition('E', 'events')
@transition('re', 'reg_event')
@transition('rc', 'reg_cancel')
@transition('ri', 'reg_info')
@transition('i', 'info_me')
@transition('I', 'info_me')
@transition('me', 'info_me')
@transition('ei', 'edit_info')
@transition('s', 'seek')
@transition('S', 'seek')
@transition('h', 'helpme')
@transition('H', 'helpme')
@transition('?', 'helpme')
@transition('help', 'helpme')
@transition('V', 'version')
@transition('v', 'version')
@transition('version', 'version')
@transition('log', 'version')
@transition('st', 'status')
@transition('stat', 'status')
@transition('nn', 'niuniu')
def setup(self, wxreq):
    print 'setup-&gt;{h V e re rc ir i ei s}|大妈信息'
    if wxreq.FSM == "send2":
        # 使用对象加载状态 放弃 FSM 状态恢复时的回调 执行
        &lt;&lt;大妈联系&gt;&gt;
#@transition('::', 'docechor')

@state('weknow')
def end(self, wxreq):
    print '...-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    return None





</t>
<t tx="zoomq.20130925103854.6431">&lt;&lt;seek&gt;&gt;
&lt;&lt;tags&gt;&gt;
&lt;&lt;no_paper&gt;&gt;

'''
WxNewsResponse, WxArticle
resp = WxNewsResponse([WxArticle(Title="iPhone 6 is here!",
                        Description="It is not a joke",
                        Url="http://jeffkit.info",
                        PicUrl="http://jeffkit.info/avatar.jpg")], wxreq).as_xml()
'''

    
</t>
<t tx="zoomq.20130925103854.6433">&lt;&lt;info_me&gt;&gt;

&lt;&lt;edit_info&gt;&gt;

&lt;&lt;info_alias&gt;&gt;

&lt;&lt;info_mail&gt;&gt;

</t>
<t tx="zoomq.20130925103854.6437">@state('weknow')
@transition('end', 'end')
def events(self, wxreq):
    print 'setup-&gt;events-&gt;end'
    crt_usr = wxreq.crt_usr
    print "crt_usr['fsm']~~", crt_usr['fsm']
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    return WxTextResponse(CFG.TXT_EVENT_NULL, wxreq).as_xml()


&lt;&lt;reg_event&gt;&gt;

&lt;&lt;reg_cancel&gt;&gt;

&lt;&lt;reg_info&gt;&gt;

</t>
<t tx="zoomq.20130925103854.6439">def ADD4SYS(k4sys, uuid):
    '''try safty insert SOMETHING to SYS:** K/V
    only dm|m|p means dama|member|paper
    '''
    uuid_idx = KV.get(CFG.K4D[k4sys])
    #print "listobj:\t", uuid_idx
    if None == uuid:
        appended = uuid_idx
    elif uuid in uuid_idx:
        appended = uuid_idx
    else:
        # 防止意外重复
        uuid_idx.append(uuid)
        appended = list(set(uuid_idx))
        KV.replace(CFG.K4D[k4sys],  appended)
    
    return (CFG.K4D[k4sys], appended)



</t>
<t tx="zoomq.20130925103854.6441">&lt;&lt;helpme&gt;&gt;

&lt;&lt;status&gt;&gt;

&lt;&lt;version&gt;&gt;

</t>
<t tx="zoomq.20130925103854.6443">def _query2dict(qstr):
    q_dict = {}
    for q in base64.urlsafe_b64decode(qstr).split("&amp;"):
        item = q.split("=")
        q_dict[item[0]] = item[1]
    return q_dict
</t>
<t tx="zoomq.20130925103854.6445">def _chkQueryArgs(api_matter, q, rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    matter = api_matter #"%s/%s"% (CFG.APIPRE, api_matter)
    args = []
    args.append(("appkey", q['appkey'] ))
    args.append(("ts", q['ts'] ))
    #print rest_method
    if rest_method in ['GET', 'DELETE']:
        sign_base_string = _genArgsStr(matter, args)
        re_sign = md5(sign_base_string + XCFG.SECRET).hexdigest()
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
    else:
        # POST PUT
        for k in q.keys():
            if k not in ['appkey', 'ts', 'sign']:
                args.append((k, q[k] ))
        sign_base_string = _genArgsStr(matter, args)
        re_sign = md5(sign_base_string + XCFG.SECRET).hexdigest()
        #print "getsign\t", q['sign']
        #print "re_sign\t", re_sign
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
        #print api_matter, q
    return chk_time&amp;chk_sign
    #return "debug"

</t>
<t tx="zoomq.20130925103854.6447">def _genArgsStr(api_path, args):
    key_values = ["%s=%s"% (arg[0], arg[1]) for arg in args]
    base_string = api_path + "/" + "&amp;".join(key_values)
    return base_string

</t>
<t tx="zoomq.20130925103854.6449">def _genQueryArgs(api_matter, q="", rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    #print "_genQueryArgs as:", rest_method
    matter = "%s/%s"% (CFG.APIPRE, api_matter)
    args = []
    args.append(("appkey", XCFG.APPKEY ))
    args.append(("ts", "%.3f" % (time()) ))
    if 'PUT' == rest_method:
        if not q:
            print "缺少 set=*** 设定值"
            return None
        q_args = q.split("=")   
        #对于值中包含类似 appmsg/show?__biz=MjM$sign=sdfsfd .. 形式就失常了!
        #print "=".join(q_args[1:])
        #args.append((q_args[0], base64.urlsafe_b64encode(q_args[1])))
        args.append((q_args[0], base64.urlsafe_b64encode(
                        "=".join(q_args[1:]) 
                        )
                    ))
        
    # GET|POST|DELETE 一般不提交额外数据
    sign_base_string = _genArgsStr(matter, args)
    args.append(("sign"
        , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    return args


'''
    if rest_method in ['GET', 'DELETE']:
        pass
        args.append(("sign"
            , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    elif 'PUT' == rest_method:
        if not q:
            print "缺少 set=*** 设定值"
            return None
        q_args = q.split("=")
        args.append((q_args[0], base64.urlsafe_b64encode(q_args[1])))
        print args
    else:
        # POST cat not set=***
        pass
        #sign_base_string = _genArgsStr(matter, args)
        args.append(("sign"
            , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    args.append(("sign"
        , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    print args
    return args

'''


</t>
<t tx="zoomq.20130925103854.6450">toUser = XCFG.AS_SRV
fromUser = XCFG.AS_USR
tStamp = int(time())
content = args.split("=")[-1].strip()
xml = CFG.TPL_TEXT % locals()
cmd = "curl -d '%s' %s/%s "% (xml, AS_LOCAL, uri)
#print cmd
#return None


</t>
<t tx="zoomq.20130925103854.6451">put_args = _genQueryArgs(uri, q=args, rest_method=method)
if not put_args:
    print "_rest_main()\n\t参数错误,请先使用 -h 学习;-)"
    return None
#print "put_args\n\t", put_args
pur_vars = " ".join(["%s=%s"% (p[0], p[1]) for p in put_args])
#print "pur_vars:\n\t", pur_vars
uri = "%s%s/%s %s"% (host, CFG.APIPRE, uri, pur_vars)
cmd = "http -f -b %s %s "% (method, uri)







</t>
<t tx="zoomq.20130925103854.6452">access_token = _wx_token_get()
_url = uri.split('/')
if 2 &lt; len(_url):
    # 有具体参数时
    if 'usr' == _url[1]:
        #print "获取指定用户信息"
        &lt;&lt;获取指定用户信息&gt;&gt;
    elif 'msg' == _url[1]:
        print "消息发送"
        &lt;&lt;消息发送&gt;&gt;
else:
    &lt;&lt;列表获得&gt;&gt; 
    
#return None
'''经测试,订阅号同公众号的接口用户完全不同,
无法共用接口!
'''





</t>
<t tx="zoomq.20130925103854.6454">@APP.get('/cli/find/m/&lt;kword&gt;/&lt;qstr&gt;')
def find_m(kword, qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/find/m/%s"% kword, q_dict, "GET"):
        feed_back = {'data':[]}
        print "find_m-&gt; ", kword
        usrs = KV.get(CFG.K4D['m'])
        #print usrs
        for u in usrs:
            m = KV.get(u)
            m_info = "%s %s %s"%(m['em'].strip()
                , m['nm'].strip()
                , m['desc'].strip()
                )
            if kword in m_info.lower():
                feed_back['data'].append(m)
    
        feed_back['msg'] = "safe quary;-)"
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.6455">TXT_VER = u'''DevRel.info 订阅号服务系统版本:
%s

Changelog:
- 140220 部署给 DevRel 订阅号
- 130928 启用Storage 服务,数据可备份/下载/恢复
- 130926 启用 Jeff 的SDK,配合运营CLI 工具简化代码
- 130923 初始可用,并发布 42分钟乱入 wechat 手册!-)
- 130918 开发启动

更多细节,请惯性地输入 h 继续吧 :)'''% VERSION

TXT_THANX = u'''亲! 感谢反馈信息, 大妈们得空就回复 ;-)
'''
TXT_HELP = u'''DevRel 订阅号目前支持以下命令:
h   ~ 使用帮助
V   ~ 系统版本
s   ~ 查阅文章
i   ~ 查阅成员资料
ei  ~ 修订成员资料

'''
'''
e   ~ 活动查询
re  ~ 活动报名
rc  ~ 放弃报名
ri  ~ 确认报名

dm [组委的名字] 可了解TA更多
'''
TXT_WELCOME = u'''DevRel 订阅号的应答范畴:
- DevRel 活动报名、签到、直播
- DevRel 大妈联系查询
- DevRel 发表文章查阅
功能正在完善中，欢迎反馈。
更多细节,请惯性地输入 h 继续吧 :)
'''


</t>
<t tx="zoomq.20130925103854.6456">TXT_CRT_DM = u'''亲! 知道嘛?
%s : 
  %s

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_CRT_ME = u'''亲! 你当前注册的成员信息如下:
妮称: %s
邮箱: %s

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_NO_INIT = u'''亲! 目测首次使用 俺们的应答服务?
请输入 ei 开始增补妮称以及邮箱卟!-) 

更多细节,请输入 h 继续吧 :)
'''

TXT_PLS_ALIAS = u'''请输入亲想用的妮称:
(成员信息增补流程 1/2)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PLS_EN4NM = u'''亲! 为输入方便,使用E文作为妮称吧!
(成员信息增补流程 1/2)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PLS_EM = u'''请输入亲常用邮箱:
(成员信息增补流程 2/2)

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_REALY_EM = u'''亲! 得给邮箱哪!
(成员信息增补流程 2/2)

也可以输入 q 退出 ;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

CN_TXT_REALY_EM = u'''亲! 要请输入邮箱格式吼!
(成员信息增补流程 2/2)

也可以输入 q 退出成员信息增补流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_DONE_EI = u'''谢谢,亲! 成员信息增补完成:
妮称: %s
邮箱: %s

(成员信息增补流程 完成!-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_NEW_USR = u'''亲!信息还曾注册, 请输入邮箱先;
形如:
em:foo.bar@gmail.com

更多细节,请惯性地输入 h 继续吧 :)
'''


</t>
<t tx="zoomq.20130925103854.6457">TXT_EVENT_NULL = u'''亲! 目测近期没有活动规划!

更多细节,请惯性地输入 h 继续吧 :)
'''</t>
<t tx="zoomq.20130925103854.6458">PAPER_TAGS = ESSAY_TAG.keys()
TXT_TAG_DEFINE = "    ".join([u"%s %s\n"%(k, ESSAY_TAG[k]) for k in ESSAY_TAG.keys()])

TXT_PLS_TAG = u'''亲! 请输入文章类别编码(类似 dm 的2字母):
然后,俺才能给出该类别的文章索引...

%s

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''% TXT_TAG_DEFINE

TXT_OUT_TAG = u'''亲! 目测输错了类别编码,再试?
(类似 dm 的2字母):

%s

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''% TXT_TAG_DEFINE

TXT_TAG_PAPERS = u'''%s ::

%s

可输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PLS_INT = u'''亲! 请输入类型文章的编号,仅数字就好:

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PUB_LIST = u'''%s ::
%s

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PUB_WAIT = u'''对不起亲!
过往文章的信息,大妈们还没来的及增补进来,
放轻松,等等先... (~.~)

更多细节,请惯性地输入 h 继续吧 :)
'''

</t>
<t tx="zoomq.20130925103854.6461">#print crt_usr['msg']
#print wxreq.Content
cmd = wxreq.Content
# 只对非命令进行处理
if cmd not in CFG.CMD_ALIAS:
    #if 8 &gt; len(crt_usr['msg']):
    #print cmd
    if cmd.isdigit():
        pass    #忽略过程中的数字输入
    '''
    elif False not in [i in string.printable for i in cmd]:
        # 全部是 ASCII 字串
        &lt;&lt;doc echo&gt;&gt;
    '''
    #print len(cmd)
    if 8 &gt; len(cmd):
        &lt;&lt;guess DM&gt;&gt;
    else:
        &lt;&lt;FW2DM&gt;&gt;
        
        #print "FSM::setup()-&gt;cmd.decode ", type(cmd.decode('utf-8'))
        #return None
        if 0:
            &lt;&lt;CC ZQ&gt;&gt;

&lt;&lt;FW actions&gt;&gt;






</t>
<t tx="zoomq.20130925103854.6463">def DAMAID(name):
    return 'm_%s_DM'% name



</t>
<t tx="zoomq.20130926092950.5432">if 'SERVER_SOFTWARE' in os.environ:
    # SAE
    AS_SAE = True
else:
    # Local
    AS_SAE = False
</t>
<t tx="zoomq.20130926092950.5433">@state('weknow')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def info_me(self, wxreq):
    print 'setup-&gt;info_me-&gt;end'
    crt_usr = wxreq.crt_usr
    #print "wxreq.crt_usr: ", crt_usr
    #print crt_usr['fsm']
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    if "" == crt_usr['em']:
        # not set info. yet
        return WxTextResponse(CFG.TXT_NO_INIT, wxreq).as_xml()
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_NO_INIT
            )
    else:
        msg = CFG.TXT_CRT_ME% (crt_usr['nm'], crt_usr['em'])
        return WxTextResponse(msg, wxreq).as_xml()
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_CRT_ME% (crt_usr['nm'].encode('utf-8'), crt_usr['em'])
            )

</t>
<t tx="zoomq.20130926092950.5434">@state('weknow')
@transition('ia', 'info_alias')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def edit_info(self, wxreq):
    print 'setup-&gt;edit_info-&gt;info_alias 提醒输入妮称'
    crt_usr = wxreq.crt_usr
    print "edit_info::", wxreq.Content   #crt_usr['msg']
    crt_usr['fsm'] = "info_alias"
    __update_usr(crt_usr)
    return WxTextResponse(CFG.TXT_PLS_ALIAS, wxreq).as_xml()
        
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_PLS_ALIAS
        )

'''    if isinstance(crt_usr['msg'], unicode):
        print "可能是中文"
        crt_usr['fsm'] = "edit_info"
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_PLS_EN4NM
            )
    else:
'''    

</t>
<t tx="zoomq.20130926092950.5435">@state('weknow')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def info_mail(self, wxreq):
    print 'setup-&gt;edit_info-&gt;info_alias-&gt;info_mail-&gt;end 回报收集的'
    crt_usr = wxreq.crt_usr
    print "info_mail::", wxreq.Content  #crt_usr['msg']
    #if "@" in crt_usr['msg']:
    if "@" in wxreq.Content.strip():
        print "get user em.."
        crt_usr['em'] = "+".join(wxreq.Content.strip().split())   #crt_usr['msg']
        crt_usr['fsm'] = "setup"
        __update_usr(crt_usr)
        
        msg = CFG.TXT_DONE_EI% (crt_usr['nm'], crt_usr['em'])
        return WxTextResponse(msg, wxreq).as_xml()
    
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_DONE_EI% (crt_usr['nm'].encode('utf-8'), crt_usr['em'])
            )
    else:
        print "error emil format?"
        crt_usr['fsm'] = "info_mail"
        __update_usr(crt_usr)
        #print WxTextResponse(CFG.TXT_REALY_EM, wxreq).as_xml()
        return WxTextResponse(CFG.TXT_REALY_EM, wxreq).as_xml()
    
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_REALY_EM
            )

'''
Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/3/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/3/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/3/web/mana4api.py", line 76, in wechat_post
    weknow.start2(G_CRT_USR['fsm'], wxreq)
  File "/data1/www/htdocs/466/weknow/3/3party/pyfsm.py", line 284, in start2
    return self.current_state.enter2(self, obj)
  File "/data1/www/htdocs/466/weknow/3/3party/pyfsm.py", line 444, in enter2
    return self.func(task, obj)
  File "/data1/www/htdocs/466/weknow/3/web/mana4api.py", line 357, in info_mail
    print WxTextResponse(CFG.TXT_REALY_EM, wxreq).as_xml()
UnicodeEncodeError: 'ascii' codec can't encode character u'\u4eb2' in position 236: ordinal not in range(128) yq30 
'''


</t>
<t tx="zoomq.20130926092950.5436">@state('weknow')
@transition('im', 'info_mail')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def info_alias(self, wxreq):
    print 'setup-&gt;edit_info-&gt;info_alias-&gt;info_mail 提醒输入邮箱'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "info_mail"
    crt_usr['nm'] = wxreq.Content   #crt_usr['msg']
    __update_usr(crt_usr)
    return WxTextResponse(CFG.TXT_PLS_EM, wxreq).as_xml()
    
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_PLS_EM
        )
</t>
<t tx="zoomq.20130926092950.5438">@APP.put('/cli/fix/e/&lt;code&gt;')
def fix_event(code):
    '''events info. editor
    '''
    q_dict = request.forms
    if _chkQueryArgs("/cli/fix/e/%s"% code, q_dict, "PUT"):
        feed_back = {'data':[]}
        set_key = list(set(q_dict.keys())-set(CFG.SECURE_ARGS))[0]
        set_var = base64.urlsafe_b64decode(request.forms[set_key])
        if set_key in CFG.K4DM.keys():
            print set_key, set_var
            feed_back['msg'] = "func. not working now..." 
        else:
            feed_back['msg'] = "out keys, NULL fixed!" 
            feed_back['can_fix_keys'] = CFG.K4DM.keys()
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130926092950.5440">def __chkDMID(text):
    for DM in CFG.DM_ALIAS.keys():
        #print CFG.DM_ALIAS[DM]
        if text in CFG.DM_ALIAS[DM]:
            print "found DAMA!", CFG.DM_ALIAS[DM][0]
            return DM
    
    print "not march DAMA!"
    return None

</t>
<t tx="zoomq.20130926092950.5442">def __chkDAMA(zipname):
    '''chk or init. webchat usr.:
        - gen KV uuid, try get
        - if no-exited, init. DM node
    '''
    k4dm = __chkDMID(zipname)
    if not k4dm:
        return None, None
    uuid = DAMAID(k4dm)
    ADD4SYS('dm', uuid)  # for old sys, collected uuid into idx node!
    usr = KV.get(uuid)
    if usr:
        #print uuid, usr
        return uuid, usr
    else:
        # inti.
        new_usr = deepcopy(CFG.K4DM)
        new_usr['his_id'] = uuid # 对象创建时, 变更时间戳同 UUID #GENID('his')
        new_usr['lasttm'] = time.time()
        new_usr['nm'] = CFG.DM_ALIAS[k4dm][0]
        KV.add(uuid, new_usr)
        #ADD4SYS('dm', uuid)
        #print uuid, new_usr
        return uuid, new_usr


</t>
<t tx="zoomq.20130926092950.5443">@state('weknow')
@transition('gb', 'papers')
@transition('dd', 'papers')
@transition('gt', 'papers')
@transition('dm', 'papers')
@transition('hd', 'papers')
@transition('et', 'papers')
@transition('ot', 'papers')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def seek(self, wxreq):
    print 'setup-&gt;seek-&gt;{gb dd gt dm ot q h} '
    crt_usr = wxreq.crt_usr
    #print "G_CRT_USR", crt_usr
    if wxreq.Content in CFG.PAPER_TAGS:
        crt_usr['fsm'] = "papers"
        __update_usr(crt_usr)
        return WxTextResponse(CFG.TXT_PLS_TAG, wxreq).as_xml()
    else:
        crt_usr['fsm'] = "seek"
        __update_usr(crt_usr)
        return WxTextResponse(CFG.TXT_OUT_TAG, wxreq).as_xml()


</t>
<t tx="zoomq.20130926092950.5444">@state('weknow')
@transition('no', 'no_paper')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def papers(self, wxreq):
    print 'setup-&gt;seek-&gt;[papers]-&gt;no'
    crt_usr = wxreq.crt_usr
    tag = wxreq.Content
    count = 0
    papers4tag = []
    if tag in CFG.ESSAY_TAG.keys():
        # right tag switch
        uuid_all_paper = KV.get(CFG.K4D['p'])
        for uuid in uuid_all_paper:
            # sometime reg. uuid as None
            if uuid and uuid[:2] == tag:
                paper =  KV.get(uuid)
                if 0 == paper['del']:
                    count += 1
                    #print paper['title']
                    #papers4tag.append((str(paper['code']),paper['title']))
                    #print paper['title']
                    #print type(paper['title'])
                    if isinstance(paper['title'], unicode):
                        #print '%s is a unicode object'%paper['title']
                        crt_title = paper['title'].encode('utf-8')
                        #print type(crt_title)
                    else:
                        #print '%s is a str object'%paper['title']
                        crt_title = paper['title']
                    papers4tag.append((int(paper['code']), crt_title))
                    #print paper['title'].enconde('utf-8')
                    #AttributeError: 'str' object has no attribute 'encode'
        #return None
        #print "count ", count
        if 0 == count:
            # not paper in the tag yet
            crt_usr['fsm'] = "setup"
            crt_usr['buffer'] = ""
            __update_usr(crt_usr)
            return WxTextResponse(CFG.TXT_PUB_WAIT, wxreq).as_xml()
        else:
            # waiting paper Number code, jump into FSM:number_paper
            #for p in papers4tag: print p
            papers4tag.sort()
            #return None
            p_list = "    ".join(["%s: %s\n"%(p[0], p[1]) for p in papers4tag])
            crt_usr['fsm'] = "number_paper"
            crt_usr['buffer'] = tag
            __update_usr(crt_usr)
            return WxTextResponse(CFG.TXT_TAG_PAPERS% (CFG.ESSAY_TAG[tag]
                , p_list.decode('utf-8')), wxreq).as_xml()
            
    else:    
        crt_usr['fsm'] = "papers"
        __update_usr(crt_usr)
        return WxTextResponse(CFG.TXT_PLS_TAG, wxreq).as_xml()

    return None
    
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    return WxTextResponse(CFG.TXT_PUB_WAIT, wxreq).as_xml()


</t>
<t tx="zoomq.20130926092950.5445">@state('weknow')
@transition('end', 'end')
@transition('q', 'helpme')
@transition('Q', 'helpme')
@transition('h', 'helpme')
@transition('H', 'helpme')
def number_paper(self, wxreq):
    print 'setup-&gt;seek-&gt;...-&gt;no-&gt;end'
    crt_usr = wxreq.crt_usr
    code = wxreq.Content
    #print code, code.isdigit()
    if code.isdigit():
        print "exp URI xml..."
        &lt;&lt;tag paper No.&gt;&gt;
        #return None
        crt_usr['fsm'] = "setup"
        __update_usr(crt_usr)
        if resp:
            return resp
        else:
            return WxTextResponse("图文消息返回异常,议案吼 大妈!", wxreq).as_xml()
    else:
        crt_usr['fsm'] = "number_paper"
        __update_usr(crt_usr)
        return WxTextResponse(CFG.TXT_PLS_INT, wxreq).as_xml()
        
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_PLS_INT
            )

'''
resp = WxNewsResponse([WxArticle(Title="iPhone 6 is here!",
                        Description="It is not a joke",
                        Url="http://jeffkit.info",
                        PicUrl="http://jeffkit.info/avatar.jpg")], wxreq).as_xml()
                        
'''</t>
<t tx="zoomq.20130926092950.5447">@APP.put('/cli/fix/p/&lt;tag&gt;/&lt;uuid&gt;')
def fix_paper(tag, uuid):
    q_dict = request.forms
    if _chkQueryArgs("/cli/fix/p/%s/%s"% (tag, uuid), q_dict, "PUT"):
        feed_back = {'data':[]}
        set_key = list(set(q_dict.keys())-set(CFG.SECURE_ARGS))[0]
        set_var = base64.urlsafe_b64decode(request.forms[set_key])
        print "\t", set_key
        print set_var
        #return None
        
        if set_key in CFG.K4WD.keys():
            print set_key, set_var
            uuid, pub = __chkPAPER(tag, uuid)
            if not uuid:
                feed_back['msg'] = "BAD tag: %s out pre-defined"% tag
            else:
                pub[set_key] = set_var.decode('utf-8')#注意将一切字串,变成 unicode 统一储存
                KV.replace(uuid, pub)
                #print pub
                feed_back['data'].append(pub)
                feed_back['uuid'] = uuid
        else:
            feed_back['msg'] = "out keys, NULL fixed!" 
            feed_back['can_fix_keys'] = CFG.K4WD.keys()
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("




</t>
<t tx="zoomq.20130926092950.5449">def __chkPAPER(tag, uuid):
    '''chk or init. webchat paper:
        - if uuid == null init. node
        - else try get it
    '''
    paper = KV.get(uuid)
    if paper:
        print uuid, paper
        ADD4SYS('p', uuid)  # for old sys, collected uuid into idx node!
        return uuid, paper
    else:
        # inti.
        if tag not in CFG.ESSAY_TAG.keys():
            return None, None
        uuid = GENID(tag)
        if not uuid:
            print "tag out GENID() accept area!"
            return None, None
        ADD4SYS('p', uuid)
        new_paper = deepcopy(CFG.K4WD)
        new_paper['uuid'] = uuid
        new_paper['tag'] = tag
        new_paper['his_id'] = GENID('his')
        new_paper['lasttm'] = time.time()
        new_paper['title'] = "waiting set..."
        KV.add(uuid, new_paper)
        print uuid, new_paper
        return uuid, new_paper



        
        
</t>
<t tx="zoomq.20130927104354.5456">from sae.storage import Bucket
BK = Bucket('bkup')


</t>
<t tx="zoomq.20130927104354.6047">def PUT2SS(raw, actype='bkup', name='db'):
    if 'bkup' == actype:
        sid = "%s.dump"% GENID('bkup', name)
    print "\n PUT2SS:", sid
    #   初始化一个Storage客户端。
    BK.put_object(sid, raw)
    uri = BK.generate_url(sid)
    return sid, uri





</t>
<t tx="zoomq.20130927104354.6049">@APP.get('/cli/st/kv/&lt;qstr&gt;')
def st_kv(qstr):
    '''查询 KVDB 整体现状
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/st/kv", q_dict, "GET"):
        feed_back = {'data':[]}
        #data.append(KV.get_info())
        return KV.get_info()
        feed_back['msg'] = "safe quary;-)"
        feed_back['data'] = KV.get_info()
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130927104354.6051">@APP.post('/cli/bk/&lt;matter&gt;')
def bkup_dump(matter):
    q_dict = request.forms
    if _chkQueryArgs("/cli/bk/%s"% matter, q_dict, "PUT"):
        feed_back = {'data':[]}
        if 'db' ==  matter:
            print "try dumps all nodes from KVDB"
            &lt;&lt;dump 所有内容&gt;&gt;
            msg = "bkup KVDB dumped"
        else:
            &lt;&lt;dump 指定内容&gt;&gt;
            msg = "bkup %s dumped"% CFG.K4D[matter]
        
        sid, uri = PUT2SS(dumps, name=matter)
        feed_back['data'].append( BK.stat_object(sid) )
        feed_back['msg'] = msg
        feed_back['uri'] = uri
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130927104354.6053">if args:
    li_arg = args.split('=')
    if 'json' == li_arg[0]:
        print "外部数据文件%s"% li_arg[1]
        get_args = _genQueryArgs(uri)
        get_str = "&amp;".join(["%s=%s"% (g[0], g[1]) for g in get_args])
        uri = "%s%s/%s/%s"% (host
            , CFG.APIPRE
            , uri
            , base64.urlsafe_b64encode(get_str)
            )
        #print uri
        #cmd = "http -b %s %s &lt; %s"% (method, uri, li_arg[1])
        cmd = "http -b -f %s %s json@%s"% (method, uri, li_arg[1])
        #print cmd
else:
    put_args = _genQueryArgs(uri, q=args, rest_method=method)
    pur_vars = " ".join(["%s=%s"% (p[0], p[1]) for p in put_args])
    uri = "%s%s/%s %s"% (host, CFG.APIPRE, uri, pur_vars)
    cmd = "http -f -b %s %s "% (method, uri)
    


</t>
<t tx="zoomq.20130927104354.6055">@APP.delete('/cli/del/bk/&lt;uuid&gt;/&lt;qstr&gt;')
def del_bk(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/del/bk/%s"% uuid, q_dict, "DELETE"):
        feed_back = {'data':[]}
        feed_back['msg'] = "deleted: %s"% uuid
        feed_back['data'].append( BK.stat_object(uuid) )
        BK.delete_object(uuid)
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130927104354.6062">@APP.put('/cli/revert/&lt;matter&gt;')
def revert_dump(matter):
    '''从服务端恢复数据用, 注意,全部恢复的步骤:
    - 删除  --kvdb-file=./logs/kv.db
    - CLI.py -D revert/db set=...   导入备份
    - CLI.py -D resolve/wx set=all  检查反指 K/V 对
    '''
    
    q_dict = request.forms
    if _chkQueryArgs("/cli/revert/%s"% matter, q_dict, "PUT"):
        feed_back = {'data':[]}
        set_key = list(set(q_dict.keys())-set(CFG.SECURE_ARGS))[0]
        set_var = base64.urlsafe_b64decode(request.forms[set_key])
        #print set_key, set_var
        if 'db' ==  matter:
            print "try revert ALL date from KVDB"
            &lt;&lt;恢复KVDB&gt;&gt;
        else:
            &lt;&lt;恢复指定数据&gt;&gt;
                    
        feed_back['data'].append( BK.stat_object(set_var) )
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130928090931.3708">@APP.put('/cli/fix/dm/&lt;nm&gt;')
def fix_dm(nm):
    q_dict = request.forms
    if _chkQueryArgs("/cli/fix/dm/%s"% nm, q_dict, "PUT"):
        feed_back = {'data':[]}
        set_key = list(set(q_dict.keys())-set(CFG.SECURE_ARGS))[0]
        set_var = base64.urlsafe_b64decode(request.forms[set_key])
        if set_key in CFG.K4DM.keys():
            #print set_key, set_var
            #print "&lt;nm&gt;", nm
            uuid, dm = __chkDAMA(nm.strip())
            #print uuid,dm
            if uuid:
                dm[set_key] = set_var.decode('utf-8')#注意将一切字串,变成 unicode 统一储存
                KV.replace(uuid, dm)
                feed_back['data'].append(dm)
                feed_back['uuid'] = uuid
        else:
            feed_back['msg'] = "out keys, NULL fixed!" 
            feed_back['can_fix_keys'] = CFG.K4DM.keys()
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130928090931.3710">@APP.put('/cli/fix/m/&lt;uuid&gt;')
def fix_member(uuid):
    q_dict = request.forms
    if _chkQueryArgs("/cli/fix/m/%s"% uuid, q_dict, "PUT"):
        feed_back = {'data':[]}
        set_key = list(set(q_dict.keys())-set(CFG.SECURE_ARGS))[0]
        set_var = base64.urlsafe_b64decode(request.forms[set_key])
        if set_key in CFG.K4DM.keys():
            print set_key, set_var
            feed_back['msg'] = "func. not working now..." 
            
        else:
            feed_back['msg'] = "out keys, NULL fixed!" 
            feed_back['can_fix_keys'] = CFG.K4DM.keys()
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130929203117.3712">@APP.post('/cli/push/p/&lt;qstr&gt;')
def push_papers(qstr):
    q_dict = _query2dict(qstr)
    q_form = request.forms
    q_file = request.files.get('json')
    #f_name, f_ext = os_splitext(q_file.filename)
    #print f_name, f_ext
    set_var = q_file.file.read()
    if _chkQueryArgs("/cli/push/p", q_dict, "POST"):
        feed_back = {'data':[]}
        #set_key = list(set(q_form.keys())-set(CFG.SECURE_ARGS))[0]
        #set_var = base64.urlsafe_b64decode(request.forms[set_key])
        j = eval(set_var) #, set_var
        p_tag = j.keys()[0]
        #print j.keys()
        #return None
        for paper in j[p_tag]:
            &lt;&lt;检验导入&gt;&gt;
        #feed_back['data'].append( BK.stat_object(sid) )
        feed_back['msg'] = "uploaded %s papers info."% len(j[p_tag])
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("



</t>
<t tx="zoomq.20131007093121.31623">uuid = GENID(p_tag)
feed_back['data'].append(uuid)
#print uuid
new_paper = deepcopy(CFG.K4WD)
new_paper['uuid'] = uuid # 对象创建时, 变更时间戳同 UUID
new_paper['his_id'] = uuid
new_paper['lasttm'] = time.time()
new_paper['tag'] = p_tag
new_paper['title'] = paper['title']
new_paper['url'] = paper['uri']
new_paper['picurl'] = paper['picuri']
new_paper['code'] = paper['code']
KV.add(uuid, new_paper)
ADD4SYS('p', uuid)
#print uuid, new_paper

</t>
<t tx="zoomq.20131007093121.31624">#print code
tag = crt_usr['buffer']
resp = None
for puuid in KV.get(CFG.K4D['p']):
    # 根据指定的类别,逐一从文章索引中过滤出指定代号的文章
    # 要求, del==0 &amp;&amp; code==指定数
    if tag == puuid[:2]:
        p = KV.get(puuid)
        #print p['code'], "\n\t", p
        if 0 == p['del']:
            if int(code) == int(p['code']):
                #print p
                resp = WxNewsResponse([WxArticle(p['title'],
                            Description="",
                            Url=p['url'],
                            PicUrl=p['picurl'])], wxreq).as_xml()
                #return resp
                break


</t>
<t tx="zoomq.20131007093121.5601"># collection wechat papers mana. matters
'''
'''
</t>
<t tx="zoomq.20131007093121.5602"># collection KVDB mana. matters
'''
'''
</t>
<t tx="zoomq.20131007093121.5614"># collection usr ACL matter
'''
'''
</t>
<t tx="zoomq.20131007093121.5615">@APP.get('/cli/sum/m/&lt;qstr&gt;')
def sum_usr(qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/m", q_dict, "GET"):
        data = []
        usrs = KV.get(CFG.K4D['m'])
        print usrs
        for u in usrs[:3]:
            data.append(KV.get(u))
    
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': len(usrs)
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5616">@APP.put('/cli/acl/usr/&lt;uuid&gt;')
def put_usr_acl(uuid):
    q_dict = request.forms
    #print q_dict
    if _chkQueryArgs("/cli/acl/usr/%s"% uuid, q_dict, "PUT"):
        if 'set' in q_dict.keys():
            &lt;&lt;acl bind&gt;&gt;
            return {'msg':"safe quary;-)"
                , 'data': data
                }
        else:
            return {'alert':"lost set=XXX !-("}
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5617">q_acl = base64.urlsafe_b64decode(q_dict['set'])
if q_acl in CFG.ACL_USR.keys():
    print q_acl, CFG.ACL_USR[q_acl]
    data = {}
    his_id = HISIT('usr', uuid, "U")
    print CFG.USR.update({'uuid':uuid}
        ,{"$set": {"acl": CFG.ACL_USR[q_acl]
            , 'his_id':his_id
            }
        })
    data['hisid'] = his_id
    data['setACL'] = CFG.ACL_USR[q_acl]
    
    #print dump, "\n\t", len(dump)
    #print marshal.loads(dump)
else:
    return {'alert':'bad acl alias!-( MUST:[ban|usr|api|admin]'}

</t>
<t tx="zoomq.20131007093121.5618">@APP.put('/cli/reliv/usr/&lt;uuid&gt;')
def put_usr_reliv(uuid):
    q_dict = request.forms
    #print q_dict
    if _chkQueryArgs("/cli/reliv/usr/%s"% uuid, q_dict, "PUT"):
        if 'set' in q_dict.keys():
            &lt;&lt;reliv del&gt;&gt;
            return {'msg':"safe quary;-)"
                , 'data': data
                }
        else:
            return {'alert':"lost set=XXX !-("}
    else:
        return "alert quary!-("



</t>
<t tx="zoomq.20131007093121.5619">data = {}
his_id = HISIT('usr', uuid, "U")
print CFG.USR.update({'uuid':uuid}
    ,{"$set": {"del": 0
        , 'his_id':his_id
        }
    })
data['hisid'] = his_id
data['means'] = "usr reliving now"
</t>
<t tx="zoomq.20131007093121.5620">@APP.delete('/cli/del/usr/&lt;uuid&gt;/&lt;qstr&gt;')
def del_usr(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/del/usr/%s"% uuid, q_dict, "DELETE"):
        &lt;&lt;usr del&gt;&gt;
        return {'msg':"safe quary;-)"
            , 'data': data
            }
    else:
        return "alert quary!-("





</t>
<t tx="zoomq.20131007093121.5621">data = {}
his_id = HISIT('usr', uuid, "D")
print CFG.USR.update({'uuid':uuid}
    ,{"$set": {"del": 1
        , 'his_id':his_id
        }
    })
data['hisid'] = his_id
data['means'] = "usr DELETE now!"
</t>
<t tx="zoomq.20131007093121.5622">@APP.get('/cli/info/usr/&lt;uuid&gt;/&lt;qstr&gt;')
def get_usr_info(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/info/usr/%s"% uuid, q_dict, "GET"):
        return {'msg':"safe quary;-)"
            , 'data':CFG.USR.find_one({'uuid': uuid}, {'_id':0})
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5623">@APP.get('/cli/list/usr/&lt;acl&gt;/&lt;qstr&gt;')
def q_usr_acl(acl, qstr):
    '''ACL_USR={'ban':0,'usr':1,'api':42,'admin':100}
    '''
    print acl
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/list/usr/%s"% acl, q_dict, "GET"):
        data = []
        for u in CFG.USR.find({'acl':acl}
            , {'_id':0, 'pp':1, 'nm':1, 'acl':1, 'uuid':1}
            , limit=5).sort("uuid"):
            data.append(u)
            
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.USR.find({'acl':acl}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5624">@APP.get('/cli/find/usr/&lt;kword&gt;/&lt;qstr&gt;')
def find_usr_kword(kword, qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    pattern = re.compile(".*%s.*"% kword)
    if _chkQueryArgs("/cli/find/usr/%s"% kword, q_dict, "GET"):
        data = []
        for u in CFG.USR.find({"$or":[{'nm':pattern}
                , {'em':pattern}
                , {'acc':pattern}
                , {'uuid':pattern}
                ]}
            , {'_id':0, 'pp':1, 'nm':1, 'acl':1, 'uuid':1}
            , limit=5):
            data.append(u)
            
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.USR.find({"$or":[{'nm':pattern}
                , {'em':pattern}
                , {'mb':pattern}
                , {'uuid':pattern}
                ]}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131010225811.3726">@APP.get('/cli/sum/p/&lt;tag&gt;/&lt;qstr&gt;')
def st_p_tag(tag, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/p/%s"% tag, q_dict, "GET"):
        feed_back = {'data':[]}
        #print tag
        all_papers = KV.get(CFG.K4D['p'])
        #print type(all_papers)
        all_papers.sort()
        tmp = {}
        for puuid in KV.get(CFG.K4D['p']):
            #print puuid, " --&gt; ", KV.get(puuid)
            if tag ==  puuid[:2]:
                p = KV.get(puuid)
                #print p
                if 0 == p['del']:
                    exp = "%s:%-28s"%(p['code'], puuid)
                    tmp[exp] = p['title']
                    feed_back['data'].append(exp) 
        feed_back['data'].sort()
        for i in range(len(feed_back['data'])):
            k = feed_back['data'][i]
            feed_back['data'][i] = "%s%s"% (k, tmp[k])
        feed_back['msg'] = "%s papers had %s ."% (tag, len(feed_back['data']))
        return feed_back
        
    else:
        return "alert quary !-("

</t>
<t tx="zoomq.20131010225811.3728">@APP.delete('/cli/del/p/&lt;uuid&gt;/&lt;qstr&gt;')
def del_p(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/del/p/%s"% uuid, q_dict, "DELETE"):
        feed_back = {'data':[]}
        p = KV.get(uuid)
        p['del'] = 1
        KV.replace(uuid, p)
        feed_back['data'].append("%s:%s"% (p['code'],p['title']))
        feed_back['msg'] = "deleted: %s"% uuid
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131011103836.16656">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
#!/usr/bin/env python
import sys
from time import time
from subprocess import Popen
from xsettings import XCFG


if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ Usage::
        $ python CLI.py [指令]
        """
    else:
        TPL_TEXT='''&lt;xml&gt;
        &lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
        &lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
        &lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
        &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
        &lt;Content&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Content&gt;
        &lt;/xml&gt;'''

        toUser = XCFG.AS_SRV
        fromUser = XCFG.AS_USR

        tStamp = int(time())
        content = sys.argv[1]
        xml = TPL_TEXT % locals()

        cmd = "curl -d '%s' http://localhost:8080/api/echo"% xml
        print cmd
        #Popen(cmd, shell=True, close_fds=True)
</t>
<t tx="zoomq.20131024165032.5626">@state('weknow')
@transition('end', 'end')
def niuniu(self, wxreq):
    print 'setup-&gt;niuniu-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    _today = datetime.now()
    return WxTextResponse(CFG.TXT_NN% (_today-CFG.NIUNIU).days, wxreq).as_xml()

</t>
<t tx="zoomq.20131223160728.4901">get_args = _genQueryArgs(uri, rest_method=method)
#print "get_args\n\t", get_args
get_str = "&amp;".join(["%s=%s"% (g[0], g[1]) for g in get_args])
#print get_str
uri = "%s%s/%s/%s"% (host
    , CFG.APIPRE
    , uri
    , base64.urlsafe_b64encode(get_str)
    )
cmd = "http -b %s %s "% (method, uri)

#print uri

#return None
</t>
<t tx="zoomq.20131223160728.4902">def _https_get(uri, tpl, **args):
    c = httplib.HTTPSConnection(uri)
    #print args
    c.request("GET", tpl % args)
    response = c.getresponse()
    #print response.status, response.reason
    data = response.read()
    return data
</t>
<t tx="zoomq.20131223160728.4904">@APP.get('/cli/info/&lt;uuid&gt;/&lt;qstr&gt;')
def info_kv(uuid, qstr):
    '''查询 UUID 的信息
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/info/%s"% uuid, q_dict, "GET"):
        feed_back = {'data':[]}
        print "info_kv()&gt;&gt;&gt; ",uuid
        print KV.get(uuid)
        #return KV.get(uuid)
        feed_back['msg'] = "safe quary;-)"
        feed_back['data'] = KV.get(uuid)
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131223160728.4905">kb_objs = {}
total = 0
for k in CFG.K4D:
    #print k
    if 'incr' == k:
        # 只要替换一个自增值
        #kb_objs[k] = CFG.K4D[k]
        kb_objs[CFG.K4D[k] ] = KV.get(CFG.K4D[k])
        total += 1
    else:
        # 需要根据索引值列逐一提取数据
        #kb_objs[k] = CFG.K4D[k]
        kb_objs[CFG.K4D[k] ] = KV.get(CFG.K4D[k])
        total += 1
        if 0 != len(kb_objs[CFG.K4D[k] ] ):
            for k4v in kb_objs[CFG.K4D[k] ]:
                crt_v = KV.get(k4v)
                if None != crt_v:
                    kb_objs[k4v] = crt_v
                    total += 1
dumps = cPickle.dumps(kb_objs)
feed_back['data'].append("%s pointed %s nodes"%(CFG.K4D, total) )

#print kb_objs

</t>
<t tx="zoomq.20131223160728.4907">kb_objs = {}
kb_objs[CFG.K4D[matter] ] = KV.get(CFG.K4D[matter])
if 0 != len(kb_objs[CFG.K4D[matter] ] ):
    for k in kb_objs[CFG.K4D[matter] ]:
        kb_objs[k] = KV.get(k)
dumps = cPickle.dumps(kb_objs)
feed_back['data'].append("%s pointed %s nodes"%(CFG.K4D[matter] 
    , len(kb_objs[CFG.K4D[matter] ] )))
#print kb_objs</t>
<t tx="zoomq.20131223160728.4908">dumps = BK.get_object_contents(set_var)
re_obj = cPickle.loads(dumps)
feed_back['msg'] = "reverted %s nodes as %s "% (len(re_obj[CFG.K4D[matter]])
    , CFG.K4D[matter]
    )
# replace global idx K/V, maybe make ghost K/V
_his = KV.get(CFG.K4D['his'])
_his.append(re_obj[CFG.K4D[matter]] )
_his = list(set(CFG.K4D['his']) )
KV.set(CFG.K4D['his'], _his)

uuids = re_obj[CFG.K4D[matter]]
KV.replace(CFG.K4D[matter], uuids)
for uuid in uuids:
    #print uuid, re_obj[uuid]
    if None == KV.get(uuid):
        KV.add(uuid, re_obj[uuid])
    else:
        KV.replace(uuid, re_obj[uuid])





</t>
<t tx="zoomq.20131223160728.4909">dumps = BK.get_object_contents(set_var)
re_obj = cPickle.loads(dumps)
feed_back['msg'] = "reverted %s nodes for whole KVDB "% len(re_obj.keys())
_INX_KEYS = [CFG.K4D[k] for k in CFG.K4D.keys()]
# replace global idx K/V, maybe make ghost K/V
_his = set()#KV.get(CFG.K4D['his'])            
for k in re_obj.keys():
    if k in _INX_KEYS:
        # 索引键处理
        if k == CFG.K4D['incr']:
            # 只要替换一个自增值
            KV.set(k, re_obj[k])
            _his.add(k)
        elif k == CFG.K4D['his']:
            # 统一增替
            _his.add(k)
        else:
            print "revert -&gt;", k 
            #print _his
            #print type(re_obj[k])
            _his.add(k)
            _his.update(set(re_obj[k]))
            print "_his ", len(_his)
            KV.set(k, re_obj[k])
    else:
        # 数据键恢复
        #print k, re_obj[k]
        if None == KV.get(k):
            KV.add(k, re_obj[k])
        else:
            KV.replace(k, re_obj[k])
KV.set(CFG.K4D['his'], list(_his) )
#print KV.get(CFG.K4D['his'])



</t>
<t tx="zoomq.20131223160728.5954">@state('weknow')
@transition('end', 'end')
def helpme(self, wxreq):
    print 'setup-&gt;helpme-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    return WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()
    
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_HELP
        )

</t>
<t tx="zoomq.20131223160728.5955">@state('weknow')
@transition('end', 'end')
def version(self, wxreq):
    print 'setup-&gt;version-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    return WxTextResponse(CFG.TXT_VER, wxreq).as_xml()

    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_VER
        )
</t>
<t tx="zoomq.20131223160728.5956">@state('weknow')
@transition('end', 'end')
def status(self, wxreq):
    print 'setup-&gt;status-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    _msg = ""   #u"是也乎 "
    &lt;&lt;sys msg&gt;&gt;
    _msg += "\n\t FromUserName:: %s"% wxreq.FromUserName
    _msg += "\n\t ToUserName:: %s"% wxreq.ToUserName
    
    return WxTextResponse(_msg, wxreq).as_xml()
    
    # 确认订阅号无法指向发送
    wxreq.FromUserName = XCFG.WX_ZQ
    print "rewrite as onoK2t_msg&gt;&gt;&gt; %s"% wxreq.FromUserName
    print WxTextResponse(_msg, wxreq).as_xml()
    
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , KV.get_info()
        )

    #_msg += "\n\t usr:: %s"% crt_usr
    #_msg += "\n\t FromUserName:: %s"% wxreq.FromUserName
    #_msg += "\n\t ToUserName:: %s"% wxreq.ToUserName
    #return WxTextResponse(_msg, wxreq).as_xml()
    #&lt;&lt;CC ZQ&gt;&gt;



</t>
<t tx="zoomq.20131223160728.5957">@state('weknow')
@transition('end', 'end')
def reg_event(self, crt_usr):
    print 'setup-&gt;reg_event-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)



</t>
<t tx="zoomq.20131223160728.5958">@state('weknow')
@transition('end', 'end')
def reg_cancel(self, crt_usr):
    print 'setup-&gt;reg_cancel-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)

</t>
<t tx="zoomq.20131223160728.5959">
@state('weknow')
@transition('end', 'end')
def reg_info(self, crt_usr):
    print 'setup-&gt;info_reg-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)


</t>
<t tx="zoomq.20131224083725.4925">@APP.put('/cli/resolve/&lt;matter&gt;')
def resolve_his(matter):
    q_dict = request.forms
    if _chkQueryArgs("/cli/resolve/%s"% matter, q_dict, "PUT"):
        feed_back = {'data':[]}
        set_key = list(set(q_dict.keys())-set(CFG.SECURE_ARGS))[0]
        set_var = base64.urlsafe_b64decode(request.forms[set_key])
        print "resolve_his()  ", set_key, set_var
        if 'his' ==  matter:
            print "try resolve_his ALL from KVDB"
            &lt;&lt;重并 HIS&gt;&gt;
            feed_back['data'] = "re-merged all KVDB info into %s nodes"% len(_his)
        elif 'wx' ==  matter:
            print "try rebuild Passpord-&gt;UUID"
            &lt;&lt;重并 Passpord&gt;&gt;
            feed_back['msg'] = "re-build Passpord-&gt;UUID" 
        elif 'fw' ==  matter:
            print "reset SYS_fw_ALL [] --&gt; {}"
            KV.set(CFG.K4D['fw'], {})
            feed_back['msg'] = "reset SYS_fw_ALL as {}" 
        #data.append(KV.get_info())
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131224083725.4926"># 根据 K4D['m'] 的索引,建立 成员 Passpord-&gt;UUID 的索引字典
users = KV.get(CFG.K4D['m'])
count = 0
for m in users:
    upp = KV.get(m)['pp']
    #print "try: %s -&gt; %s"%(m, upp)
    ppu = KV.get(upp)
    if not ppu:
        count +=1
        KV.add(upp, m)
#KV.set(CFG.K4D['his'], list(_his) )
#print KV.get(CFG.K4D['his'])
feed_back['data'] = "re-point %s pp-&gt;UUID in %s Members"% (count, len(users))







</t>
<t tx="zoomq.20131224083725.4928">#_msg += "\nget_info()-&gt; "+str(KV.get_info())
_INX_KEYS = [CFG.K4D[k] for k in CFG.K4D.keys()]
for k in _INX_KEYS:
    # 索引键处理
    if 'SYS_TOT' == k:
        _msg += u"\n SYS_TOT::"+str(KV.get(k))
    else :
        # 统一合并
        _msg += u"\n %s :: %snodes"%(k, len(KV.get(k)))

#print "pp2u--&gt;", KV.get(KV.get('oFNShjiOhclfJ-CtOO81p2sPrBfs'))
</t>
<t tx="zoomq.20131224083725.4930">_INX_KEYS = [CFG.K4D[k] for k in CFG.K4D.keys()]
_his = set() #KV.get(CFG.K4D['his'])  
feed_back['msg'] = []
#print _INX_KEYS, type(_INX_KEYS)
for k in _INX_KEYS:
    # 索引键处理
    print k
    if 'SYS_TOT' == k:
        _his.add(k)
    elif 'SYS_pubs_HIS' == k:
        # 统一合并
        _his.add(k)
    else:
        _idx = KV.get(k)
        print "revert -&gt; %s &lt;- %s nodes"% (k, len(_idx) ) 
        _his.add(k)
        _his.update(set(_idx) )
        #KV.set(CFG.K4D['his'], KV.get(CFG.K4D['his']).update(set(re_obj[k])) )
        feed_back['msg'].append("%s &gt;&gt;&gt; %s nodes"% (k, len(_idx) ) ) 

KV.set(CFG.K4D['his'], list(_his) )
#print KV.get(CFG.K4D['his'])




</t>
<t tx="zoomq.20131224083725.4931">if usr:
    #print usr
    return usr
else:
    # inti.
    new_usr = deepcopy(CFG.objUSR)
    new_usr['his_id'] = uuid # 对象创建时, 变更时间戳同 UUID
    new_usr['pp'] = passport
    new_usr['lasttm'] = time.time()
    new_usr['fsm'] = None
    KV.add(uuid, new_usr)
    #ADD4SYS('m', uuid)
    #print new_usr
    return new_usr

</t>
<t tx="zoomq.20131224083725.5903"># 列表获得
#uri = 'wx/ls'
data = _https_get(CFG.CLI_URI[uri][0]
    , CFG.CLI_URI[uri][1]
    , token = access_token
    )
print data


return None
</t>
<t tx="zoomq.20131224083725.5904">#openid = _url[-1]
wx_uri = "/".join(_url[:2])
data = _https_get(CFG.CLI_URI[wx_uri][0]
    , CFG.CLI_URI[wx_uri][1]
    , token = access_token
    , openid = _url[-1]
    )
print data

return None</t>
<t tx="zoomq.20131224083725.5906">def _wx_token_get():
    data = _https_get(CFG.CLI_URI['wx/t'][0]
        , CFG.CLI_URI['wx/t'][1]
        , appid = XCFG.WX_APPID
        , secret = XCFG.WX_SECRET
        )
    print data
    js = json.loads(data)
    print js
    print "access_token: ", js['access_token']
    return js['access_token']


</t>
<t tx="zoomq.20131224083725.5907">wx_uri = "/".join(_url[:2])

host = CFG.CLI_URI[wx_uri][0]
url = "%s=%s"% (CFG.CLI_URI[wx_uri][1], access_token)

openid = _url[-1]
content = u'#细思恐极....'#.encode('utf-8')
#.encode('utf-8')#"sayeahoo..."
title = u'如何使用社区服务号'
_msg = CFG.SRV_TXT_JSON% locals()
#CFG.SRV_FAQ_JSON% locals()
#CFG.SRV_TXT_JSON% locals()
#(openid, u'#细思恐极....')
#   "sayeahoo..."   u'#细思恐极....'
params  = urllib.urlencode({"msgtype": "text"
    , "touser": openid
    , "text": {"content": "sayeahoo..."}
    })
#print params
data = _https_post(CFG.CLI_URI[wx_uri][0]
    , CFG.CLI_URI[wx_uri][1]
    , _msg  #bytearray(_msg.encode('utf-8'))
    , token = access_token
    )
#print data
return None 


_msg = {
    "touser":access_token,
    "msgtype":"text",
    "text":
    {
         "content":"Hello World"
    }
}

headers = {
    'User-Agent': 'python',
    'Content-Type': 'application/x-www-form-urlencoded',
}
values = urllib.urlencode(_msg)
#urllib.quote(_msg) #urllib.urlencode(_msg)
conn = httplib.HTTPSConnection(host)
conn.request("POST", url, values, headers)
response = conn.getresponse()
data = response.read()
print 'Response: ', response.status, response.reason
print 'Data:'
print data

return None

tpl_msg = '''{
    "touser": "%s", 
    "msgtype": "text", 
    "text": {
        "content": "%s"
    }
}'''

_msg = tpl_msg% (openid, u'是也乎,是也乎')

_curl = "curl --data '%s' -3 http://%s/%s=%s"%( _msg
    , CFG.CLI_URI[wx_uri][0]
    , CFG.CLI_URI[wx_uri][1]
    , access_token
    )
#curl -3 URL
#curl --data-urlencode "date=April 1" example.com/form.cgi
#print _curl
cmd = _curl
return None

''' 发送文本消息

{
    "touser":"OPENID",
    "msgtype":"text",
    "text":
    {
         "content":"Hello World"
    }
}
'''

</t>
<t tx="zoomq.20131224083725.5909">def _https_post(uri, tpl, values, **args):
    '''esp. HTTPSConnection only POST bytearray, means:
    - values MUST 'unicode'
    '''
    url = "https://%s%s"% (uri, tpl % args)
    print url
    #return None
    data = bytearray(values.encode('utf-8'))    #urllib.urlencode(values)
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    #print dir(response)
    #return None
    print response.code, response.msg
    result = response.read()
    print result
    return result
    
    ##########################################################
    
    c = httplib.HTTPSConnection(uri, 443)
    print uri
    values = "123123"
    print tpl % args
    c.request("POST"
        , tpl % args
        , bytearray(values.encode('utf-8'))
        #values#.encode('utf-16be') #.decode("utf-8")
        #, {'Content-Type': 'text/plain; charset=utf-8'}
        )
    #return None
    response = c.getresponse()
    print response.status, response.reason
    data = response.read()
    return data
    
    
    
'''
conn = httplib.HTTPSConnection(host='www.site.com', port=443, cert_file=_certfile)
   params  = urllib.urlencode({'cmd': 'token', 'device_id_st': 'AAAA-BBBB-CCCC',
                                'token_id_st':'DDDD-EEEE_FFFF', 'product_id':'Unit Test',
                                'product_ver':"1.6.3"})
    conn.request("POST", "servlet/datadownload", params)
    content = conn.getresponse().read()
    #print response.status, response.reason
    conn.close()
'''</t>
<t tx="zoomq.20131224083725.5910">SRV_TXT_JSON = '''{"touser": "%(openid)s", "msgtype": "text", "text": {"content": "%(content)s"}}'''

SRV_NEW_JSON = '''{
    "touser":"%(openid)s",
    "msgtype":"news",
    "news":{
        "articles": [
         {
             "title":"%(title)s",
             "description":"%(desc)s",
             "url":"%(url)s",
             "picurl":"%(picurl)s"
         }
         ]
    }
}'''
#u'如何使用社区服务号' How to usage public srv.
#u'\u5982\u4f55\u4f7f\u7528\u793e\u533a\u670d\u52a1\u53f7'
SRV_FAQ_JSON = '''{
    "touser":"%(openid)s",
    "msgtype":"news",
    "news":{
        "articles": [
         {
             "title":"%(title)s",
             "description":"",
             "url":"http://zhgdg.gitcafe.com/2013-12/howto-pubsrv/",
             "picurl":"http://mmbiz.qpic.cn/mmbiz/xCpd6WgWqOCZG5ey4Va6XfxNpz1BbBV1JUicNG1DUJZYLGM7tiaaWVs7YEEv80iaM8fMticTghY44HP2ZafJIwbMPA/0"
         }
         ]
    }
}'''
</t>
<t tx="zoomq.20131224083725.5911">access_token = _wx_token_get()
wx_uri = 'wx/msg'
host = CFG.CLI_URI[wx_uri][0]
url = CFG.CLI_URI[wx_uri][1]    #"%s=%s"% (CFG.CLI_URI[wx_uri][1], access_token)

openid = XCFG.WX_ZQ
content = _msg  #u'#细思恐极....'
cc_msg = CFG.SRV_TXT_JSON% locals()
print cc_msg
data = _https_post(host
    , url
    , cc_msg  #bytearray(_msg.encode('utf-8'))
    , token = access_token
    )
print data


</t>
<t tx="zoomq.20131225115522.4948">access_token = _wx_token_get()
wx_uri = 'wx/msg'
host = CFG.CLI_URI[wx_uri][0]
url = CFG.CLI_URI[wx_uri][1]    #"%s=%s"% (CFG.CLI_URI[wx_uri][1], access_token)

openid = XCFG.WX_ZQ
print cmd
print "&lt;&lt;&lt; type(cmd) ", type(cmd)
content = cmd.decode('utf-8') #CFG.VERSION #u'#细思恐极....'#cmd.decode('utf-8') #_msg 
print "&lt;&lt;&lt; cmd.decode", type(cmd.decode('utf-8'))
cc_msg = CFG.SRV_TXT_JSON% locals()
print "&lt;&lt;&lt; type(cc_msg)", type(cc_msg)
print cc_msg

data = _https_post(host
    , url
    , cc_msg  #bytearray(_msg.encode('utf-8'))
    , token = access_token
    )
print "_https_post()&gt;&gt;&gt; ", data



</t>
<t tx="zoomq.20131225115522.4949">'''collected old code for doc.
'''
    # base hard code for all 
    xml = etree.XML(request.forms.keys()[0])
    __MsgType = xml.findtext("MsgType")
    __Content = xml.findtext("Content") #.encode('utf8')
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    G_CRT_USR = __chkRegUsr(toUser)
    G_CRT_USR['msg'] = __Content
    G_CRT_USR['fromUser'] = fromUser
    G_CRT_USR['toUser'] = toUser
    # usage pyfsm as FSM echo all kinds of usr ask
    weknow = pyfsm.Registry.get_task('weknow')
    if G_CRT_USR['fsm']:
        weknow.start2(G_CRT_USR['fsm'], G_CRT_USR)
        __update_usr(G_CRT_USR)
    else:
        weknow.start2('setup', G_CRT_USR)
        G_CRT_USR['fsm'] = "setup"
        __update_usr(G_CRT_USR)
    print "weknow.send2:\n", weknow.send2(__Content, G_CRT_USR)
    return None
    
    # base choas if elif else
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;



</t>
<t tx="zoomq.20131225115522.4950">@state('weknow')
@transition('end', 'end')
def docechor(self, wxreq):
    print 'setup-&gt;docechor-&gt;end'
    crt_usr = wxreq.crt_usr
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    code = wxreq.Content
    print code
    return None
    _today = datetime.now()
    return WxTextResponse(CFG.TXT_NN% (_today-CFG.NIUNIU).days, wxreq).as_xml()

</t>
<t tx="zoomq.20131225115522.4951">print "try march dama"
uuid, dm = __chkDAMA(cmd)
if uuid:
    #print dm
    msg = CFG.TXT_CRT_DM% (dm['nm'], dm['desc'])
    return WxTextResponse(msg, wxreq).as_xml()


</t>
<t tx="zoomq.20131225115522.4952">if "::" == cmd[:2]:
    print cmd[2:]
    print dir()

</t>
<t tx="zoomq.20131226095232.5929"># 消息 转抄 池 SYS_fw_ALL-&gt;索引所有 aa=0 的消息
K4FW = {"his_id":""   # 更新戮
    , "del":0
    , "aa":0    # 是否回答了
    , "usrid":""# 谁的消息
    , "dm":""   # 回答的大妈 uuid
    , "qa":[]   # [0]&lt;- 消息,[1]&lt;-回答 
    }







</t>
<t tx="zoomq.20131226095232.5930">count = 0
k4dm = KV.get(CFG.K4D[matter] )
for k in k4dm:
    count += 1
    crt_dm = KV.get(k)
    _dm = {}
    _dm['UUID'] = k
    _dm['pp'] = crt_dm['pp']
    _dm['nm'] = crt_dm['nm']
    _dm['desc'] = crt_dm['desc']
    _dm['em'] = crt_dm['em']
    _dm['mo'] = crt_dm['mo']    # Mobile
    feed_back['data'].append(_dm)
    
feed_back['msg'] = "all Storaged %s dumps"% count


</t>
<t tx="zoomq.20131226095232.5931">feed_back['msg'] = "all SYS_* status."

for k in CFG.K4D.keys():
    if "incr" == k:
        feed_back['data'].append("%s is %s "%(
            CFG.K4D['incr']
            , KV.get(CFG.K4D['incr'])
            ))
    elif 'fw' == k:
        tot = 0
        all_fw = KV.get(CFG.K4D[k])
        for k in all_fw:
            tot += len(all_fw[k])
        feed_back['data'].append("FW %s users %s msg.s"% (
            len(all_fw)
            , tot
            ))
    else:
        feed_back['data'].append("%s hold %s nodes,"% (
            CFG.K4D[k]
            , len(KV.get(CFG.K4D[k]))
            ))




</t>
<t tx="zoomq.20131226095232.5932">if matter in CFG.K4D.keys():
    feed_back['msg'] = "base %s data."% CFG.K4D[matter]
    feed_back['data'] = "%s hold %s node info."% (CFG.K4D[matter]
        , len(KV.get(CFG.K4D[matter] )) 
        )
else:
    feed_back['msg'] = "sum key is OUT CFG.K4D !-("
</t>
<t tx="zoomq.20131226095232.5933">count = 0
for dump in BK.list():
    count += 1
    feed_back['data'].append("%s ~ %s"%(dump['name']
        , dump['bytes']
        ))

feed_back['msg'] = "all Storaged %s dumps"% count



</t>
<t tx="zoomq.20131226095232.5934">, "find/m":     "GET"       # 搜索用户
, "del/usr":    "DELETE"    # 软删除所有用户 (包含tag 信息)
, "reliv/usr":  "PUT"       # 恢复指定用户
, "acl/usr":    "PUT"       # 设置用户权限
, "ls/usr":   "GET"       # 列出指定级别用户

</t>
<t tx="zoomq.20131226095232.5935">, "fix/dm":     "PUT"       # 修订 大妈 信息
, "fix/m":      "PUT"       # 修订 成员 信息
, "fix/e":      "PUT"       # 增补 活动 信息
, "fix/p/gb":   "PUT"       # 增补 gb文章 信息
, "fix/p/dd":   "PUT"       # 增补 dd文章 信息
, "fix/p/gt":   "PUT"       # 增补 gt文章 信息
, "fix/p/dm":   "PUT"       # 增补 dm文章 信息
, "fix/p/hd":   "PUT"       # 增补 hd文章 信息
, "fix/p/ot":   "PUT"       # 增补 其它文章 信息
, "fix/p/et":   "PUT"       # 增补 活动文章 文章

, "sum/his":    "GET"       # 统计 历史 索引现状
, "sum/db":     "GET"       # 统计 整体 信息现状
, "sum/dm":     "GET"       # 统计 大妈 信息现状
, "sum/m":      "GET"       # 统计 成员 信息现状
, "sum/e":      "GET"       # 统计 活动 信息现状
, "sum/p":      "GET"       # 统计 文章 信息现状
, "sum/p/gb":   "GET"       # 统计 分类文章 信息现状
, "sum/p/dd":   "GET"       # 统计 分类文章 信息现状
, "sum/p/gt":   "GET"       # 统计 分类文章 信息现状
, "sum/p/dm":   "GET"       # 统计 分类文章 信息现状
, "sum/p/hd":   "GET"       # 统计 分类文章 信息现状
, "sum/p/ot":   "GET"       # 统计 分类文章 信息现状
, "sum/p/et":   "GET"       # 统计 分类文章 信息现状
, "del/p":      "DELETE"    # 删除指定文章

</t>
<t tx="zoomq.20131226095232.5936">, "push/p":     "POST"      # 推送批量文章数据 可以根据 url 判定是否有重复 

, "sum/bk":     "GET"       # 综合 备份 数据现状
, "del/bk":     "DELETE"    # 删除指定备份 dump

, "bk/db":    "POST"      # 备份整个 KVDB
, "bk/dm":    "POST"      # 备份所有 大妈
, "bk/m":     "POST"      # 备份所有 成员
, "bk/e":     "POST"      # 备份所有 活动
, "bk/p":     "POST"      # 备份所有 文章

, "revert/db":  "PUT"      # 恢复整个 KVDB
, "revert/dm":  "PUT"      # 恢复 大妈 数据
, "revert/m":   "PUT"      # 恢复 成员 数据
, "revert/e":   "PUT"      # 恢复 活动 数据
, "revert/p":   "PUT"      # 恢复 文章 数据

, "resolve/his": "PUT"     # 重建 HIS 索引
, "resolve/wx":  "PUT"     # 重建 wx_Passpord--&gt;UUID 索引
, "resolve/fw": "PUT"      # 重建 FW 索引容器,从旧的 [] -&gt; {}

</t>
<t tx="zoomq.20131226095232.5937">, "wx/t":       "HTTPS"     # 获取 token
, "wx/ls":      "HTTPS"    # 获取关注列表
, "wx/usr":     "HTTPS"     # 获取 用户信息
, "wx/msg":     "HTTPS"     # 获取 用户信息

, "sum/fw":     "GET"     # 获取 转抄 状态
, "fw/ll":      "GET"     # 模拟 大妈 刷转抄
, "fw/dd":      "GET"     # 模拟 订户 刷回复
, "fw/mm":  "PUT"     # 忽略 订户 消息
, "fw/aa":  "PUT"     # 转复 订户 消息

</t>
<t tx="zoomq.20131226095232.5938">VERSION = "weknow v14.2.20.1"</t>
<t tx="zoomq.20131226095232.5939">'''FW flow:
 0.
usr&gt; msg
&lt;&lt; if not cmd/number alert dd command.
&gt;&gt; stored msg
 1.
dm&gt; aa 
&lt;&lt; list no-answer msg.
dm&gt; mm[No.for msg]  ~ ingore point msg
dm&gt; cc[No.for msg]  ~ answer sting
&lt;&lt; storded answer
&lt;&lt; mv UUID from SYS_fw_ALL -&gt; SYS_pubs_HIS
 2.
usr&gt; dd
&lt;&lt; echo dm answered msg

data relation:: SYS_fw_ALL is 2 level tree
writing:
    SYS_fw_ALL-&gt;{"UUID:usr":[UUID:fw msg.s,,,]}
为了在 FW 事务的 aa/mm 操作中, 对成员有简短的编号可用
    必须对字典的键对应上固定的序号!
    所以,使用临时字典内索引 "sequence"
cheking:
    Passpoord=&gt;"UUID:usr"
                    ~&gt; SYS_fw_ALL
                        ~&gt; UUID:usr
                            +-&gt; UUID::fw msg.s

CLI FW support:
+ GET sum/fw list all fw status
+ GET fw/dd/:uuid  as member flush answer

+ GET fw/ll  as DM flush member msg.s
+ PUT fw/mm/:zip  as DM cancel some msg.
+ PUT fw/aa/:zip aa="" as answer the questin
'''

</t>
<t tx="zoomq.20131226095232.5940">usr_pp = wxreq.FromUserName
if usr_pp in XCFG.P__DM:    #XCFG.WX_DM:
    print "FW2DM &gt;&gt;&gt; is ZQ self"
    pass
else:
    print "FW2DM &gt;&gt;&gt; is usr"
    #print cmd, type(cmd.decode('utf-8'))    #注意将一切字串,变成 unicode 统一储存
    print __putFW(usr_pp, cmd.decode('utf-8'))
    
#pub[set_key] = set_var.decode('utf-8')
</t>
<t tx="zoomq.20131226095232.5942">def __putFW(pp, msg):
    '''chk or push usr msg.'s UUID into CFG.K4D['FW']:
        - usage pp as UUID 
        - deepcopy tpl. for obj.
        - return UUID:usr and obj.
    CFG.K4D['fw'] means:{}
    '''
    fw_uuid = GENID('fw')
    &lt;&lt;init FW msg.&gt;&gt;
    #uuid = GENID('fw')
    uuid = KV.get(pp)
    print "pp-&gt;uuid:: ", uuid
    all_fw = KV.get(CFG.K4D['fw'])
    if uuid not in all_fw.keys():
        all_fw[uuid] = []
    all_fw[uuid].append(fw_uuid)
    
    tmp_seq = all_fw['sequence'] # 为内部用户临时索引,为了精简码号
    #all_fw['sequence'] = []
    tmp_seq.append(uuid)
    all_fw['sequence'] = list(set(tmp_seq))
    #print all_fw
    #ADD4SYS('fw', uuid) 是双层结构了!
    return uuid, new_fw

'''K4FW = {"his_id":""   # 更新戮
    , "del":0
    , "aa":0    # 是否回答了
    , "dm":""   # 回答的大妈 uuid
    , "qa":[]   # [0]&lt;- 消息,[1]&lt;-回答 
    }
'''



</t>
<t tx="zoomq.20131226095232.5946">&lt;&lt;FW actions&gt;&gt;
</t>
<t tx="zoomq.20131226095232.5947">@APP.get('/cli/fw/ll/&lt;qstr&gt;')
def fw_ll(qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/fw/ll", q_dict, "GET"):
        data = {}
        all_fw = KV.get(CFG.K4D['fw'])
        _seq = all_fw['sequence']
        # 立即重建临时索引 ???
        # KV.set(CFG.K4D['fw'],{'sequence':[]})
        #print type(_seq), _seq
        tot = 0
        #print type(all_fw['sequence']) -&gt;&lt;type 'list'&gt;
        
        for u in all_fw.keys():
            if 'sequence' == u:
                pass
            else:
                #print "%s as %s"% (u, _seq.index(u))
                if u in _seq:
                    usr_as = "usr~%s"% _seq.index(u)
                    data[usr_as] = []
                    print usr_as
                    &lt;&lt;提示组织&gt;&gt;
                else:
                    print "需要清除的空 回复 容器" 
                    all_fw.pop(u)
                #break
                
        print all_fw
        return None    
        return {'msg':";-) as DM aa FWmsg.s"
            , 'data': data
            , 'count': "FW %s users %s msg.s"% (
                len(all_fw.keys())-1
                , tot)
            }
    else:
        return "alert quary!-("


</t>
<t tx="zoomq.20131226095232.5948">@APP.get('/cli/fw/dd/&lt;uuid&gt;/&lt;qstr&gt;')
def fw_dd(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/fw/dd/%s"% uuid, q_dict, "GET"):
        #data = []
        return None
        q_mongo = CFG.HIS.find({},{'_id':0},limit=1).sort("uuid", pymongo.DESCENDING)
        #print q_mongo[0] cPickle.loads('N.')
        return {'msg':"safe quary;-)"
            , 'data':q_mongo[0]
            , 'count': CFG.HIS.find({}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131226095232.5950">@APP.put('/cli/fw/aa/&lt;zid&gt;')
def fw_aa(zid):
    q_dict = request.forms
    if _chkQueryArgs("/cli/fw/aa/%s"% zid, q_dict, "PUT"):
        data = []
        return None
        
        fw_keys = KV.get(CFG.K4D['fw'])
        for k in fw_keys:
            _fw = KV.get(k)
            echo = "%s~%s %s"% (fw_keys.index(k)
                , _fw['qa'][0]
                , k )
            #print echo 
            data.append(echo)
        return {'msg':";-) as DM aa FWmsg.s"
            , 'data':data
            , 'count': len(fw_keys)
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131226095232.5952">@APP.put('/cli/fw/mm/&lt;zip_id&gt;')
def fw_mm(zip_id):
    q_dict = request.forms
    if _chkQueryArgs("/cli/fw/mm/%s"% zip_id, q_dict, "PUT"):
        data = []
        usr_as = base64.urlsafe_b64decode(q_dict['set'])
        _uid = int(usr_as)
        _zid = int(zip_id)
        
        all_fw = KV.get(CFG.K4D['fw'])
        _seq = all_fw['sequence']
        uuid_usr = _seq[_uid]
        uuid_fw = all_fw[uuid_usr][_zid]
        &lt;&lt;mm FW&gt;&gt;
        #&lt;&lt; storded answer
        #&lt;&lt; mv UUID from SYS_fw_ALL -&gt; SYS_pubs_HIS
        &lt;&lt;mv FWmsg.&gt;&gt;
        
        return {'msg':";-) as DM mm msg.s:%s~%s"%(_uid, uuid_fw)
            , 'data': _fw
            }
    else:
        return "alert quary!-("


</t>
<t tx="zoomq.20131226095232.5953">count = 0
k4dm = KV.get(CFG.K4D[matter] )
print k4dm
for k in k4dm.keys():
    count += 1
    #feed_back['data'].append(_dm)

feed_back['msg'] = "all Storaged %s dumps"% count


</t>
<t tx="zoomq.20131226095232.5955"># inti.
new_fw = deepcopy(CFG.K4FW)
new_fw['his_id'] = fw_uuid # 对象创建时, 变更时间戳同 UUID
new_fw['qa'].append(msg)
#print uuid, new_fw
KV.add(fw_uuid, new_fw)

</t>
<t tx="zoomq.20131226095232.5956">
tot += len(all_fw[u])
for k in all_fw[u]:
    _fw = KV.get(k)
    echo = "%s~%s %s"% ( all_fw[u].index(k)
        , _fw['qa'][0]
        , k )
    #print echo , type(echo)
    data[usr_as].append(echo)

</t>
<t tx="zoomq.20131228000540.4028">_fw = KV.get(uuid_fw)
#print _fw
_fw['dm'] = XCFG.AS_USR
_fw['aa'] = 1
_fw['del'] = 1
_fw['his_id'] = GENID('his')#   stamp updated

KV.set(uuid_fw, _fw)

</t>
<t tx="zoomq.20131228000540.4029"># 从对应用户消息索引列表中清除
all_fw[uuid_usr].remove(uuid_fw)
if 0 == len(all_fw[uuid_usr]):
    # 如果已经为空,则从 sequence 内部索引中清除用户ID
    all_fw['sequence'].remove(uuid_usr)
    # 再整个清除用户消息UUID 关系对结点
    all_fw.pop(uuid_usr)
#print all_fw
#return None
KV.set(CFG.K4D['fw'] ,all_fw)

# 收录到历史全集索引
his_all = KV.get(CFG.K4D['his'])
his_all.append(uuid_fw)
KV.set(CFG.K4D['his'] ,his_all)


</t>
</tnodes>
</leo_file>
